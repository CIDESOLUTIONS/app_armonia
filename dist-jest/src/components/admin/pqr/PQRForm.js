"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Save, X } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
export default function PQRForm({ initialData, properties, users, categories, onSubmit, onCancel, isSubmitting, isEditing, language }) {
    const [_formData, _setFormData] = useState({
        title: (initialData === null || initialData === void 0 ? void 0 : initialData.title) || '',
        description: (initialData === null || initialData === void 0 ? void 0 : initialData.description) || '',
        type: (initialData === null || initialData === void 0 ? void 0 : initialData.type) || 'PETITION',
        priority: (initialData === null || initialData === void 0 ? void 0 : initialData.priority) || 'MEDIUM',
        propertyUnit: initialData === null || initialData === void 0 ? void 0 : initialData.propertyUnit,
        assignedTo: initialData === null || initialData === void 0 ? void 0 : initialData.assignedTo,
        category: initialData === null || initialData === void 0 ? void 0 : initialData.category
    });
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => (Object.assign(Object.assign({}, prev), { [name]: value })));
    };
    const handleSelectChange = (name, value) => {
        setFormData(prev => (Object.assign(Object.assign({}, prev), { [name]: value })));
    };
    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit(formData);
    };
    return (_jsxs("form", { onSubmit: handleSubmit, className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "title", children: language === 'Español' ? 'Título' : 'Title' }), _jsx(Input, { id: "title", name: "title", value: formData.title, onChange: handleInputChange, placeholder: language === 'Español' ? 'Título de la solicitud' : 'Request title', required: true })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "type", children: language === 'Español' ? 'Tipo' : 'Type' }), _jsxs(Select, { value: formData.type, onValueChange: (value) => handleSelectChange('type', value), children: [_jsx(SelectTrigger, { id: "type", children: _jsx(SelectValue, { placeholder: language === 'Español' ? 'Seleccionar tipo' : 'Select type' }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "PETITION", children: language === 'Español' ? 'Petición' : 'Petition' }), _jsx(SelectItem, { value: "COMPLAINT", children: language === 'Español' ? 'Queja' : 'Complaint' }), _jsx(SelectItem, { value: "CLAIM", children: language === 'Español' ? 'Reclamo' : 'Claim' })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "priority", children: language === 'Español' ? 'Prioridad' : 'Priority' }), _jsxs(Select, { value: formData.priority, onValueChange: (value) => handleSelectChange('priority', value), children: [_jsx(SelectTrigger, { id: "priority", children: _jsx(SelectValue, { placeholder: language === 'Español' ? 'Seleccionar prioridad' : 'Select priority' }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "LOW", children: language === 'Español' ? 'Baja' : 'Low' }), _jsx(SelectItem, { value: "MEDIUM", children: language === 'Español' ? 'Media' : 'Medium' }), _jsx(SelectItem, { value: "HIGH", children: language === 'Español' ? 'Alta' : 'High' }), _jsx(SelectItem, { value: "URGENT", children: language === 'Español' ? 'Urgente' : 'Urgent' })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "propertyUnit", children: language === 'Español' ? 'Unidad' : 'Property Unit' }), _jsxs(Select, { value: formData.propertyUnit || '', onValueChange: (value) => handleSelectChange('propertyUnit', value), children: [_jsx(SelectTrigger, { id: "propertyUnit", children: _jsx(SelectValue, { placeholder: language === 'Español' ? 'Seleccionar unidad' : 'Select property unit' }) }), _jsx(SelectContent, { children: properties.map(property => (_jsx(SelectItem, { value: property.unitNumber, children: property.unitNumber }, property.id))) })] })] }), isEditing && (_jsxs("div", { children: [_jsx(Label, { htmlFor: "assignedTo", children: language === 'Español' ? 'Asignado a' : 'Assigned To' }), _jsxs(Select, { value: formData.assignedTo || '', onValueChange: (value) => handleSelectChange('assignedTo', value), children: [_jsx(SelectTrigger, { id: "assignedTo", children: _jsx(SelectValue, { placeholder: language === 'Español' ? 'Seleccionar responsable' : 'Select assignee' }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "", children: language === 'Español' ? '-- Sin asignar --' : '-- Unassigned --' }), users.map(user => (_jsx(SelectItem, { value: user.name, children: user.name }, user.id)))] })] })] })), _jsxs("div", { children: [_jsx(Label, { htmlFor: "category", children: language === 'Español' ? 'Categoría' : 'Category' }), _jsxs(Select, { value: formData.category || '', onValueChange: (value) => handleSelectChange('category', value), children: [_jsx(SelectTrigger, { id: "category", children: _jsx(SelectValue, { placeholder: language === 'Español' ? 'Seleccionar categoría' : 'Select category' }) }), _jsx(SelectContent, { children: categories.map(category => (_jsx(SelectItem, { value: category, children: category }, category))) })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "description", children: language === 'Español' ? 'Descripción' : 'Description' }), _jsx(Textarea, { id: "description", name: "description", value: formData.description, onChange: handleInputChange, placeholder: language === 'Español' ? 'Descripción detallada de la solicitud...' : 'Detailed description of the request...', className: "min-h-[150px]", required: true })] }), _jsxs("div", { className: "flex justify-end space-x-2", children: [_jsxs(Button, { type: "button", variant: "outline", onClick: onCancel, disabled: isSubmitting, children: [_jsx(X, { className: "mr-2 h-4 w-4" }), language === 'Español' ? 'Cancelar' : 'Cancel'] }), _jsx(Button, { type: "submit", className: "bg-indigo-600 hover:bg-indigo-700", disabled: isSubmitting, children: isSubmitting ? (_jsxs(_Fragment, { children: [_jsx(Loader2, { className: "mr-2 h-4 w-4 animate-spin" }), language === 'Español' ? 'Guardando...' : 'Saving...'] })) : (_jsxs(_Fragment, { children: [_jsx(Save, { className: "mr-2 h-4 w-4" }), language === 'Español' ? 'Guardar' : 'Save'] })) })] })] }));
}
