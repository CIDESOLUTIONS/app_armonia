// Esquema Prisma para el sistema de control de correspondencia y paquetería
// Ampliación del modelo existente con nuevas funcionalidades

// Definición del datasource
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  schemas    = ["armonia", "tenant"]
}

// Definición del generator
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enumeración para tipos de correspondencia
enum PackageType {
  PACKAGE    // Paquete o encomienda
  MAIL       // Correo o carta
  DOCUMENT   // Documento
  FOOD       // Comida o delivery
  OTHER      // Otro tipo
  
  @@schema("tenant")
}

// Enumeración para estados de correspondencia
enum PackageStatus {
  RECEIVED   // Recibido en recepción
  NOTIFIED   // Residente notificado
  PENDING    // Pendiente de entrega
  DELIVERED  // Entregado al destinatario
  RETURNED   // Devuelto al remitente
  EXPIRED    // Expirado (no reclamado)
  
  @@schema("tenant")
}

// Enumeración para prioridades
enum PackagePriority {
  LOW        // Baja prioridad
  NORMAL     // Prioridad normal
  HIGH       // Alta prioridad
  URGENT     // Urgente
  
  @@schema("tenant")
}

// Modelo ampliado para Paquetes y Correspondencia
model Package {
  id                Int             @id @default(autoincrement())
  trackingCode      String?         // Código interno de seguimiento generado automáticamente
  type              PackageType     // Tipo de correspondencia (enum)
  trackingNumber    String?         // Número de seguimiento externo (si aplica)
  courier           String?         // Empresa de mensajería (si aplica)
  senderName        String?         // Nombre del remitente
  senderCompany     String?         // Empresa del remitente
  
  // Información del destinatario
  residentId        Int?            // ID del residente destinatario (si está registrado)
  unitId            Int             // ID de la unidad de destino
  unitNumber        String          // Número de la unidad (ej: "Apartamento 101")
  residentName      String          // Nombre del residente destinatario
  
  // Fechas y estados
  receivedAt        DateTime        // Fecha y hora de recepción
  notifiedAt        DateTime?       // Fecha y hora de notificación al residente
  deliveredAt       DateTime?       // Fecha y hora de entrega al destinatario
  expirationDate    DateTime?       // Fecha de expiración (para devolución)
  status            PackageStatus   @default(RECEIVED) // Estado actual
  priority          PackagePriority @default(NORMAL)   // Prioridad
  
  // Información de recepción y entrega
  receivedByStaffId Int             // ID del personal que recibió
  receivedByStaffName String        // Nombre del personal que recibió
  deliveredByStaffId Int?           // ID del personal que entregó
  deliveredByStaffName String?      // Nombre del personal que entregó
  receivedByResidentId Int?         // ID del residente que recibió
  receivedByResidentName String?    // Nombre de quien recibió (puede ser diferente al destinatario)
  
  // Características físicas
  size              String?         // Tamaño (Small, Medium, Large)
  weight            Float?          // Peso en kg
  isFragile         Boolean         @default(false) // Si es frágil
  needsRefrigeration Boolean        @default(false) // Si necesita refrigeración
  
  // Contenido y notas
  description       String?         // Descripción del contenido
  notes             String?         // Notas adicionales
  tags              String[]        // Etiquetas para categorización y búsqueda
  
  // Archivos adjuntos
  mainPhotoUrl      String?         // URL de la foto principal
  attachments       Json?           // URLs de fotos adicionales y documentos
  signatureUrl      String?         // URL de la firma digital de recepción
  
  // Auditoría y relaciones
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  statusHistory     PackageStatusHistory[] // Relación con historial de estados
  notifications     PackageNotification[]  // Relación con notificaciones enviadas
  
  // Índices para optimización de búsquedas
  @@index([status])
  @@index([receivedAt])
  @@index([unitNumber])
  @@index([residentId])
  @@index([trackingCode])
  @@index([trackingNumber])
  
  @@schema("tenant")
}

// Nuevo modelo para historial de estados de paquetes
model PackageStatusHistory {
  id              Int             @id @default(autoincrement())
  packageId       Int             // ID del paquete
  package         Package         @relation(fields: [packageId], references: [id])
  previousStatus  PackageStatus?  // Estado anterior
  newStatus       PackageStatus   // Nuevo estado
  changedAt       DateTime        @default(now()) // Fecha y hora del cambio
  changedByUserId Int             // ID del usuario que realizó el cambio
  changedByUserName String        // Nombre del usuario que realizó el cambio
  notes           String?         // Notas sobre el cambio
  
  @@index([packageId])
  @@index([changedAt])
  
  @@schema("tenant")
}

// Nuevo modelo para notificaciones de paquetes
model PackageNotification {
  id              Int             @id @default(autoincrement())
  packageId       Int             // ID del paquete
  package         Package         @relation(fields: [packageId], references: [id])
  type            String          // Tipo de notificación (email, sms, push, app)
  recipient       String          // Destinatario de la notificación (email, teléfono, etc.)
  sentAt          DateTime        @default(now()) // Fecha y hora de envío
  status          String          // Estado de la notificación (sent, delivered, read, failed)
  content         String          // Contenido de la notificación
  
  @@index([packageId])
  @@index([sentAt])
  
  @@schema("tenant")
}

// Nuevo modelo para plantillas de notificación de paquetes
model PackageNotificationTemplate {
  id              Int             @id @default(autoincrement())
  name            String          // Nombre de la plantilla
  type            String          // Tipo de notificación (email, sms, push, app)
  subject         String          // Asunto (para emails)
  template        String          // Plantilla con variables
  isDefault       Boolean         @default(false) // Si es la plantilla predeterminada
  isActive        Boolean         @default(true)  // Si está activa
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@schema("tenant")
}

// Nuevo modelo para configuración de correspondencia
model PackageSettings {
  id                      Int       @id @default(autoincrement())
  autoNotifyResident      Boolean   @default(true)  // Notificar automáticamente al residente
  notificationMethods     String[]  // Métodos de notificación (email, sms, push, app)
  expirationDays          Int       @default(30)    // Días hasta expiración
  reminderFrequency       Int       @default(3)     // Frecuencia de recordatorios en días
  requireSignature        Boolean   @default(true)  // Requerir firma para entrega
  requirePhoto            Boolean   @default(true)  // Requerir foto al recibir
  allowAnyoneToReceive    Boolean   @default(false) // Permitir que cualquiera reciba
  updatedAt               DateTime  @updatedAt
  
  @@schema("tenant")
}

// Nuevo modelo para reportes de correspondencia
model PackageReport {
  id              Int       @id @default(autoincrement())
  name            String    // Nombre del reporte
  type            String    // Tipo de reporte (daily, weekly, monthly, custom)
  parameters      Json      // Parámetros del reporte
  schedule        String?   // Programación (cron expression)
  recipients      String[]  // Destinatarios del reporte
  lastRun         DateTime? // Última ejecución
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@schema("tenant")
}

// Modelos existentes que deben mantenerse
model ResidentialComplex {
  id          Int      @id @default(autoincrement())
  name        String
  schemaName  String   @unique  // Nombre del schema en la DB
  totalUnits  Int
  adminEmail  String
  adminName   String
  adminPhone  String?
  address     String?
  city        String?
  state       String?
  country     String?  @default("Colombia")
  propertyTypes Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  @@schema("armonia")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  password    String
  role        String   // 'ADMIN', 'COMPLEX_ADMIN', 'RESIDENT', 'STAFF'
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  complexId   Int?
  complex     ResidentialComplex? @relation(fields: [complexId], references: [id])
  @@schema("armonia")
}

model Prospect {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  complexName String
  units       Int
  message     String?
  createdAt   DateTime @default(now())
  contacted   Boolean  @default(false)
  @@schema("armonia")
}

// Enumeraciones para el sistema de visitantes
enum DocumentType {
  CC      // Cédula de Ciudadanía
  CE      // Cédula de Extranjería
  PASSPORT // Pasaporte
  OTHER   // Otro tipo de documento
  
  @@schema("tenant")
}

enum VisitorStatus {
  ACTIVE   // Visitante actualmente en las instalaciones
  DEPARTED // Visitante que ya salió
  
  @@schema("tenant")
}

enum AccessPassType {
  SINGLE_USE // Pase de un solo uso
  TEMPORARY  // Pase temporal con validez limitada
  RECURRENT  // Pase recurrente (ej: servicios de limpieza)
  
  @@schema("tenant")
}

enum AccessPassStatus {
  ACTIVE  // Pase activo y válido
  USED    // Pase ya utilizado (para single_use)
  EXPIRED // Pase expirado
  REVOKED // Pase revocado por administración
  
  @@schema("tenant")
}

enum AccessAction {
  ENTRY  // Registro de entrada
  EXIT   // Registro de salida
  DENIED // Acceso denegado
  
  @@schema("tenant")
}

// Otros modelos existentes necesarios para mantener la integridad del esquema
model Visitor {
  id              Int       @id @default(autoincrement())
  name            String
  documentType    DocumentType
  documentNumber  String
  destination     String
  residentName    String?
  entryTime       DateTime
  exitTime        DateTime?
  plate           String?
  photoUrl        String?
  status          VisitorStatus
  notes           String?
  preRegisterId   Int?
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  accessPassId    Int?
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  purpose         String?
  company         String?
  temperature     Float?
  belongings      Json?
  signature       String?
  registeredBy    Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accessLogs      AccessLog[]
  
  @@index([documentType, documentNumber])
  @@index([status])
  @@index([entryTime])
  @@index([destination])
  @@index([preRegisterId])
  
  @@schema("tenant")
}

model PreRegisteredVisitor {
  id              Int       @id @default(autoincrement())
  name            String
  documentType    DocumentType?
  documentNumber  String?
  residentId      Int
  unitId          Int
  expectedDate    DateTime
  validFrom       DateTime
  validUntil      DateTime
  purpose         String?
  isRecurrent     Boolean   @default(false)
  recurrenceRule  String?
  accessCode      String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  visitors        Visitor[]
  accessPasses    AccessPass[]
  
  @@index([residentId])
  @@index([status])
  @@index([validFrom, validUntil])
  
  @@schema("tenant")
}

model AccessPass {
  id              Int       @id @default(autoincrement())
  code            String    @unique
  qrUrl           String
  type            AccessPassType
  validFrom       DateTime
  validUntil      DateTime
  usageCount      Int       @default(0)
  maxUsages       Int       @default(1)
  status          AccessPassStatus
  preRegisterId   Int?
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  visitors        Visitor[]
  accessLogs      AccessLog[]
  
  @@index([code])
  @@index([status])
  @@index([validFrom, validUntil])
  @@index([preRegisterId])
  
  @@schema("tenant")
}

model AccessLog {
  id              Int       @id @default(autoincrement())
  action          AccessAction
  timestamp       DateTime  @default(now())
  location        String
  notes           String?
  registeredBy    Int
  visitorId       Int?
  visitor         Visitor?  @relation(fields: [visitorId], references: [id])
  accessPassId    Int?
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  
  @@index([action])
  @@index([timestamp])
  @@index([visitorId])
  @@index([accessPassId])
  
  @@schema("tenant")
}

model Resident {
  id              Int       @id @default(autoincrement())
  userId          Int
  unit            String
  residentType    String
  documentType    String
  documentNumber  String
  phone           String?
  emergencyContact String?
  vehicles        Json?
  moveInDate      DateTime?
  moveOutDate     DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@schema("tenant")
}

model Incident {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  category        String
  priority        String
  location        String
  reportedAt      DateTime
  reportedBy      String
  assignedTo      String?
  resolvedAt      DateTime?
  status          String
  attachments     Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  updates         IncidentUpdate[]
  
  @@schema("tenant")
}

model IncidentUpdate {
  id              Int       @id @default(autoincrement())
  incidentId      Int
  incident        Incident  @relation(fields: [incidentId], references: [id])
  content         String
  author          String
  timestamp       DateTime  @default(now())
  attachments     Json?
  
  @@schema("tenant")
}
