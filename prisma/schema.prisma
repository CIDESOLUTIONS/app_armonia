// Esquema Prisma para el sistema de gestión de incidentes
// Ampliación del modelo existente con nuevas funcionalidades

// Definición del datasource
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// Definición del generator
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enumeración para categorías de incidentes
enum IncidentCategory {
  SECURITY       // Seguridad (robos, intrusiones, alarmas)
  MAINTENANCE    // Mantenimiento (daños, reparaciones)
  EMERGENCY      // Emergencias (incendios, inundaciones)
  NOISE          // Ruido o perturbaciones
  PARKING        // Problemas de estacionamiento
  COMMON_AREAS   // Problemas en áreas comunes
  NEIGHBOR       // Conflictos entre vecinos
  SERVICES       // Servicios públicos (agua, luz, gas)
  PETS           // Problemas con mascotas
  OTHER          // Otros tipos
  
  
}

// Enumeración para prioridades de incidentes
enum IncidentPriority {
  LOW           // Baja prioridad
  MEDIUM        // Prioridad media
  HIGH          // Alta prioridad
  CRITICAL      // Crítica (emergencia)
  
  
}

// Enumeración para estados de incidentes
enum IncidentStatus {
  REPORTED      // Reportado (inicial)
  ASSIGNED      // Asignado a responsable
  IN_PROGRESS   // En proceso de atención
  ON_HOLD       // En espera (por materiales, terceros, etc.)
  RESOLVED      // Resuelto
  CLOSED        // Cerrado
  CANCELLED     // Cancelado
  REOPENED      // Reabierto
  
  
}

// Enumeración para tipos de notificación
enum NotificationType {
  EMAIL         // Correo electrónico
  SMS           // Mensaje de texto
  PUSH          // Notificación push
  APP           // Notificación en app
  WHATSAPP      // Mensaje de WhatsApp
  
  
}

// Enumeración para tipos de adjuntos
enum AttachmentType {
  IMAGE         // Imagen
  DOCUMENT      // Documento
  VIDEO         // Video
  AUDIO         // Audio
  OTHER         // Otro tipo
  
  
}

// Enumeración para planes freemium
enum PlanType {
  BASIC         // Gratuito: hasta 30 unidades, funcionalidades básicas, 1 año de históricos
  STANDARD      // $25/mes: hasta 30 unidades + $1/unidad adicional, funcionalidades avanzadas, 3 años de históricos
  PREMIUM       // $50/mes: hasta 80 unidades + $1/unidad adicional, todas las funcionalidades, históricos ilimitados
}

// Modelo ampliado para Incidentes
model Incident {
  id                Int               @id @default(autoincrement())
  incidentNumber    String            // Número único de incidente (ej: INC-20250601-001)
  title             String            // Título del incidente
  description       String            // Descripción detallada
  
  // Categorización
  category          IncidentCategory  // Categoría del incidente
  subcategory       String?           // Subcategoría (opcional)
  priority          IncidentPriority  // Prioridad
  impact            String?           // Impacto (Alto, Medio, Bajo)
  
  // Ubicación
  location          String            // Ubicación del incidente
  unitId            Int?              // ID de la unidad relacionada (si aplica)
  unitNumber        String?           // Número de la unidad (si aplica)
  area              String?           // Área específica
  
  // Fechas y tiempos
  reportedAt        DateTime          // Fecha y hora del reporte
  assignedAt        DateTime?         // Fecha y hora de asignación
  startedAt         DateTime?         // Fecha y hora de inicio de atención
  resolvedAt        DateTime?         // Fecha y hora de resolución
  closedAt          DateTime?         // Fecha y hora de cierre
  dueDate           DateTime?         // Fecha límite según SLA
  
  // Personas involucradas
  reportedById      Int               // ID del usuario que reporta
  reportedByName    String            // Nombre de quien reporta
  reportedByRole    String            // Rol de quien reporta (residente, staff, admin)
  assignedToId      Int?              // ID del responsable asignado
  assignedToName    String?           // Nombre del responsable
  assignedToRole    String?           // Rol del responsable
  
  // Estado y seguimiento
  status            IncidentStatus    @default(REPORTED) // Estado actual
  resolution        String?           // Descripción de la resolución
  rootCause         String?           // Causa raíz identificada
  preventiveActions String?           // Acciones preventivas recomendadas
  
  // Etiquetas y clasificación
  isPublic          Boolean           @default(false) // Si es visible para todos los residentes
  isEmergency       Boolean           @default(false) // Si requiere atención inmediata
  requiresFollowUp  Boolean           @default(false) // Si requiere seguimiento posterior
  tags              String[]          // Etiquetas para categorización
  
  // SLA y métricas
  slaId             Int?              // ID del SLA aplicable
  responseTime      Int?              // Tiempo de respuesta en minutos
  resolutionTime    Int?              // Tiempo de resolución en minutos
  slaBreached       Boolean?          // Si se incumplió el SLA
  
  // Relaciones con otros módulos
  relatedIncidentIds String[]         // IDs de incidentes relacionados
  visitorId         Int?              // ID de visitante relacionado (si aplica)
  packageId         Int?              // ID de paquete relacionado (si aplica)
  
  // Archivos adjuntos
  mainPhotoUrl      String?           // URL de la foto principal
  attachments       Json?             // Lista de adjuntos con metadatos
  
  // Auditoría y relaciones
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  updates           IncidentUpdate[]  // Actualizaciones del incidente
  comments          IncidentComment[] // Comentarios
  statusHistory     IncidentStatusHistory[] // Historial de estados
  notifications     IncidentNotification[]  // Notificaciones enviadas
  
  // Índices para optimización
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([reportedAt])
  @@index([assignedToId])
  @@index([unitNumber])
  @@index([incidentNumber])
  
  
}

model Document {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  url         String
  type        String // e.g., 'GENERAL', 'FINANCIAL', 'LEGAL', 'ASSEMBLY'
  uploadedBy  Int
  uploadedAt  DateTime @default(now())

  @@index([type])
  @@index([uploadedBy])
}

// Modelo mejorado para actualizaciones de incidentes
model IncidentUpdate {
  id                Int               @id @default(autoincrement())
  incidentId        Int               // ID del incidente
  incident          Incident          @relation(fields: [incidentId], references: [id])
  content           String            // Contenido de la actualización
  type              String            // Tipo de actualización (progress, note, action)
  authorId          Int               // ID del autor
  authorName        String            // Nombre del autor
  authorRole        String            // Rol del autor
  isInternal        Boolean           @default(false) // Si es solo para personal interno
  timestamp         DateTime          @default(now()) // Fecha y hora de la actualización
  attachments       Json?             // Adjuntos específicos de esta actualización
  
  @@index([incidentId])
  @@index([timestamp])
  
  
}

// Nuevo modelo para comentarios de incidentes
model IncidentComment {
  id                Int               @id @default(autoincrement())
  incidentId        Int               // ID del incidente
  incident          Incident          @relation(fields: [incidentId], references: [id])
  content           String            // Contenido del comentario
  authorId          Int               // ID del autor
  authorName        String            // Nombre del autor
  authorRole        String            // Rol del autor
  isInternal        Boolean           @default(false) // Si es solo para personal interno
  timestamp         DateTime          @default(now()) // Fecha y hora del comentario
  parentId          Int?              // ID del comentario padre (para respuestas)
  attachments       Json?             // Adjuntos específicos de este comentario
  
  @@index([incidentId])
  @@index([timestamp])
  
  
}

// Nuevo modelo para historial de estados de incidentes
model IncidentStatusHistory {
  id                Int               @id @default(autoincrement())
  incidentId        Int               // ID del incidente
  incident          Incident          @relation(fields: [incidentId], references: [id])
  previousStatus    IncidentStatus?   // Estado anterior
  newStatus         IncidentStatus    // Nuevo estado
  changedAt         DateTime          @default(now()) // Fecha y hora del cambio
  changedById       Int               // ID del usuario que realizó el cambio
  changedByName     String            // Nombre del usuario
  changedByRole     String            // Rol del usuario
  reason            String?           // Razón del cambio
  timeInStatus      Int?              // Tiempo en el estado anterior (minutos)
  
  @@index([incidentId])
  @@index([changedAt])
  
  
}

// Nuevo modelo para notificaciones de incidentes
model IncidentNotification {
  id                Int               @id @default(autoincrement())
  incidentId        Int               // ID del incidente
  incident          Incident          @relation(fields: [incidentId], references: [id])
  type              NotificationType  // Tipo de notificación
  recipient         String            // Destinatario (email, teléfono, etc.)
  recipientId       Int?              // ID del destinatario (si es usuario)
  recipientRole     String?           // Rol del destinatario
  subject           String            // Asunto de la notificación
  content           String            // Contenido de la notificación
  sentAt            DateTime          @default(now()) // Fecha y hora de envío
  status            String            // Estado (sent, delivered, read, failed)
  
  @@index([incidentId])
  @@index([sentAt])
  
  
}

// Nuevo modelo para SLA de incidentes
model IncidentSLA {
  id                Int               @id @default(autoincrement())
  name              String            // Nombre del SLA
  description       String?           // Descripción
  category          IncidentCategory? // Categoría aplicable (null = todas)
  priority          IncidentPriority? // Prioridad aplicable (null = todas)
  responseTime      Int               // Tiempo de respuesta objetivo (minutos)
  resolutionTime    Int               // Tiempo de resolución objetivo (minutos)
  businessHoursOnly Boolean           @default(true) // Si aplica solo en horario laboral
  escalationRules   Json?             // Reglas de escalamiento
  notifyRules       Json?             // Reglas de notificación
  isActive          Boolean           @default(true) // Si está activo
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  
}

// Nuevo modelo para plantillas de notificación de incidentes
model IncidentNotificationTemplate {
  id                Int               @id @default(autoincrement())
  name              String            // Nombre de la plantilla
  type              NotificationType  // Tipo de notificación
  eventType         String            // Tipo de evento (created, assigned, updated, etc.)
  subject           String            // Asunto (para emails)
  template          String            // Plantilla con variables
  isDefault         Boolean           @default(false) // Si es la plantilla predeterminada
  isActive          Boolean           @default(true)  // Si está activa
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  
}

// Nuevo modelo para configuración de incidentes
model IncidentSettings {
  id                      Int       @id @default(autoincrement())
  autoAssignEnabled       Boolean   @default(false) // Asignación automática
  autoNotifyResident      Boolean   @default(true)  // Notificar automáticamente al residente
  autoNotifyStaff         Boolean   @default(true)  // Notificar automáticamente al personal
  notificationMethods     String[]  // Métodos de notificación
  requirePhoto            Boolean   @default(false) // Requerir foto al reportar
  allowAnonymousReports   Boolean   @default(false) // Permitir reportes anónimos
  publicIncidentsEnabled  Boolean   @default(true)  // Habilitar incidentes públicos
  residentCanClose        Boolean   @default(false) // Residentes pueden cerrar sus incidentes
  updatedAt               DateTime  @updatedAt
  
  
}

// Nuevo modelo para categorías personalizadas de incidentes
model IncidentCustomCategory {
  id                Int       @id @default(autoincrement())
  name              String    // Nombre de la categoría
  parentCategory    IncidentCategory // Categoría principal
  description       String?   // Descripción
  isActive          Boolean   @default(true) // Si está activa
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  
}

// Nuevo modelo para reportes de incidentes
model IncidentReport {
  id                Int       @id @default(autoincrement())
  name              String    // Nombre del reporte
  type              String    // Tipo de reporte (daily, weekly, monthly, custom)
  parameters        Json      // Parámetros del reporte
  schedule          String?   // Programación (cron expression)
  recipients        String[]  // Destinatarios del reporte
  lastRun           DateTime? // Última ejecución
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  
}

// Nuevo modelo para equipos de atención de incidentes
model IncidentTeam {
  id                Int       @id @default(autoincrement())
  name              String    // Nombre del equipo
  description       String?   // Descripción
  memberIds         Int[]     // IDs de los miembros
  categories        IncidentCategory[] // Categorías que atiende
  isActive          Boolean   @default(true) // Si está activo
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  
}

// Modelos existentes que deben mantenerse
model ResidentialComplex {
  id          Int      @id @default(autoincrement())
  name        String
  schemaName  String   @unique  // Nombre del schema en la DB
  totalUnits  Int
  adminEmail  String
  adminName   String
  adminPhone  String?
  address     String?
  city        String?
  state       String?
  country     String?  @default("Colombia")
  propertyTypes Json?
  // Campos del modelo freemium
  planType    PlanType @default(BASIC)  // Plan actual del conjunto
  planStartDate DateTime @default(now()) // Fecha de inicio del plan
  planEndDate   DateTime? // Fecha de fin del plan (null para BASIC)
  trialEndDate  DateTime? // Fecha de fin del período de prueba
  isTrialActive Boolean  @default(true)  // Si está en período de prueba
  maxUnits      Int      @default(30)    // Máximo de unidades permitidas según plan
  // Campos de auditoría
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  subscriptions Subscription[]
  listings    Listing[]
  properties  Property[]
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  name                 String?
  password             String
  role                 String   // 'ADMIN', 'COMPLEX_ADMIN', 'RESIDENT', 'STAFF'
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  complexId            Int?
  complex              ResidentialComplex?   @relation(fields: [complexId], references: [id])
  listings             Listing[]
  sentMessages         Message[]             @relation("sentMessages")
  receivedMessages     Message[]             @relation("receivedMessages")
  reports              Report[]
  loginHistory         LoginHistory[]
  passwordResetToken   String?               @unique
  passwordResetExpires DateTime?
  preRegisteredVisitors MicroCreditApplication[]
  reviews Review[]
  userVotes UserVote[]
  paymentAttempts PaymentAttempt[]
  createdPayments Payment[] @relation("CreatedPayments")
  attendances Attendance[]
  ownedProperties Property[] @relation("OwnedProperties")
  reportedListings ReportedListing[] @relation("ReportedListings")
  createdFees Fee[] @relation("CreatedFees")
  createdBudgets Budget[] @relation("CreatedBudgets")
  createdSurveys Survey[] @relation("CreatedSurveys")
  createdServiceProviders ServiceProvider[] @relation("CreatedServiceProviders")
  createdDocuments Document[] @relation("CreatedDocuments")
  registeredVisitors Visitor[] @relation("RegisteredVisitors")
  registeredPackages Package[] @relation("RegisteredPackages")
  reportedListings ReportedListing[]
  createdFees Fee[] @relation("CreatedFees")
  createdBudgets Budget[] @relation("CreatedBudgets")
  createdSurveys Survey[] @relation("CreatedSurveys")
  createdServiceProviders ServiceProvider[] @relation("CreatedServiceProviders")
  createdDocuments Document[] @relation("CreatedDocuments")
  registeredVisitors Visitor[] @relation("RegisteredVisitors")
  registeredPackages Package[] @relation("RegisteredPackages")
}

model Prospect {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  complexName String
  units       Int
  message     String?
  createdAt   DateTime @default(now())
  contacted   Boolean  @default(false)
  
}

// Modelo para historial de suscripciones y facturación
model Subscription {
  id          Int      @id @default(autoincrement())
  complexId   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])
  planType    PlanType
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  amount      Decimal  @db.Decimal(10,2) // Monto mensual
  currency    String   @default("USD")
  // Datos de facturación
  billingEmail     String
  billingName      String
  billingAddress   String?
  billingCity      String?
  billingCountry   String? @default("Colombia")
  // Metadatos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  
}

// Otros modelos existentes necesarios para mantener la integridad del esquema
// Enumeraciones para el sistema de visitantes
enum DocumentType {
  CC      // Cédula de Ciudadanía
  CE      // Cédula de Extranjería
  PASSPORT // Pasaporte
  OTHER   // Otro tipo de documento
  
  
}

enum VisitorStatus {
  ACTIVE   // Visitante actualmente en las instalaciones
  DEPARTED // Visitante que ya salió
  
  
}

enum AccessPassType {
  SINGLE_USE // Pase de un solo uso
  TEMPORARY  // Pase temporal con validez limitada
  RECURRENT  // Pase recurrente (ej: servicios de limpieza)
  
  
}

enum AccessPassStatus {
  ACTIVE  // Pase activo y válido
  USED    // Pase ya utilizado (para single_use)
  EXPIRED // Pase expirado
  REVOKED // Pase revocado por administración
  
  
}

enum AccessAction {
  ENTRY  // Registro de entrada
  EXIT   // Registro de salida
  DENIED // Acceso denegado
  
  
}

// Enumeración para tipos de correspondencia
enum PackageType {
  PACKAGE    // Paquete o encomienda
  MAIL       // Correo o carta
  DOCUMENT   // Documento
  FOOD       // Comida o delivery
  OTHER      // Otro tipo
  
  
}

// Enumeración para estados de correspondencia
enum PackageStatus {
  RECEIVED   // Recibido en recepción
  NOTIFIED   // Residente notificado
  PENDING    // Pendiente de entrega
  DELIVERED  // Entregado al destinatario
  RETURNED   // Devuelto al remitente
  EXPIRED    // Expirado (no reclamado)
  
  
}

// Enumeración para prioridades
enum PackagePriority {
  LOW        // Baja prioridad
  NORMAL     // Prioridad normal
  HIGH       // Alta prioridad
  URGENT     // Urgente
  
  
}

// Otros modelos existentes necesarios para mantener la integridad del esquema
model Visitor {
  id              Int       @id @default(autoincrement())
  name            String
  documentType    DocumentType
  documentNumber  String
  destination     String
  residentName    String?
  entryTime       DateTime
  exitTime        DateTime?
  plate           String?
  photoUrl        String?
  status          VisitorStatus
  notes           String?
  preRegisterId   Int?
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  accessPassId    Int?
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  purpose         String?
  company         String?
  temperature     Float?
  belongings      Json?
  signature       String?
  registeredBy    Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accessLogs      AccessLog[]
  
  @@index([documentType, documentNumber])
  @@index([status])
  @@index([entryTime])
  @@index([destination])
  @@index([preRegisterId])
  
  
}

model PreRegisteredVisitor {
  id              Int       @id @default(autoincrement())
  name            String
  documentType    DocumentType?
  documentNumber  String?
  residentId      Int
  resident        User      @relation(fields: [residentId], references: [id])
  unitId          Int
  expectedDate    DateTime
  validFrom       DateTime
  validUntil      DateTime
  purpose         String?
  isRecurrent     Boolean   @default(false)
  recurrenceRule  String?
  accessCode      String
  qrCodeUrl       String? // Nuevo campo para la URL del QR
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  visitors        Visitor[]
  accessPasses    AccessPass[]
  
  @@index([residentId])
  @@index([status])
  @@index([validFrom, validUntil])
  
  
}

model AccessPass {
  id              Int       @id @default(autoincrement())
  code            String    @unique
  qrUrl           String
  type            AccessPassType
  validFrom       DateTime
  validUntil      DateTime
  usageCount      Int       @default(0)
  maxUsages       Int       @default(1)
  status          AccessPassStatus
  preRegisterId   Int?
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  visitors        Visitor[]
  accessLogs      AccessLog[]
  
  @@index([code])
  @@index([status])
  @@index([validFrom, validUntil])
  @@index([preRegisterId])
  
  
}

model AccessLog {
  id              Int       @id @default(autoincrement())
  action          AccessAction
  timestamp       DateTime  @default(now())
  location        String
  notes           String?
  registeredBy    Int
  visitorId       Int?
  visitor         Visitor?  @relation(fields: [visitorId], references: [id])
  accessPassId    Int?
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  
  @@index([action])
  @@index([timestamp])
  @@index([visitorId])
  @@index([accessPassId])
  
  
}

model Resident {
  id              Int       @id @default(autoincrement())
  userId          Int
  unit            String
  residentType    String
  documentType    String
  documentNumber  String
  phone           String?
  emergencyContact String?
  vehicles        Json?
  moveInDate      DateTime?
  moveOutDate     DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  
}

model Package {
  id                Int             @id @default(autoincrement())
  trackingCode      String?
  type              PackageType
  trackingNumber    String?
  courier           String?
  senderName        String?
  senderCompany     String?
  residentId        Int?
  unitId            Int
  unitNumber        String
  residentName      String
  receivedAt        DateTime
  notifiedAt        DateTime?
  deliveredAt       DateTime?
  expirationDate    DateTime?
  status            PackageStatus   @default(RECEIVED)
  priority          PackagePriority @default(NORMAL)
  receivedByStaffId Int
  receivedByStaffName String
  deliveredByStaffId Int?
  deliveredByStaffName String?
  receivedByResidentId Int?
  receivedByResidentName String?
  size              String?
  weight            Float?
  isFragile         Boolean         @default(false)
  needsRefrigeration Boolean        @default(false)
  description       String?
  notes             String?
  tags              String[]
  mainPhotoUrl      String?
  attachments       Json?
  signatureUrl      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  statusHistory     PackageStatusHistory[]
  notifications     PackageNotification[]
  
  @@index([status])
  @@index([receivedAt])
  @@index([unitNumber])
  @@index([residentId])
  @@index([trackingCode])
  @@index([trackingNumber])
  
  
}

model PackageStatusHistory {
  id              Int             @id @default(autoincrement())
  packageId       Int
  package         Package         @relation(fields: [packageId], references: [id])
  previousStatus  PackageStatus?
  newStatus       PackageStatus
  changedAt       DateTime        @default(now())
  changedByUserId Int
  changedByUserName String
  notes           String?
  
  @@index([packageId])
  @@index([changedAt])
  
  
}

model PackageNotification {
  id              Int             @id @default(autoincrement())
  packageId       Int
  package         Package         @relation(fields: [packageId], references: [id])
  type            String
  recipient       String
  sentAt          DateTime        @default(now())
  status          String
  content         String
  
  @@index([packageId])
  @@index([sentAt])
  
  
}

model PackageNotificationTemplate {
  id              Int             @id @default(autoincrement())
  name            String
  type            String
  subject         String
  template        String
  isDefault       Boolean         @default(false)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  
}

model PackageSettings {
  id                      Int       @id @default(autoincrement())
  autoNotifyResident      Boolean   @default(true)
  notificationMethods     String[]
  expirationDays          Int       @default(30)
  reminderFrequency       Int       @default(3)
  requireSignature        Boolean   @default(true)
  requirePhoto            Boolean   @default(true)
  allowAnyoneToReceive    Boolean   @default(false)
  updatedAt               DateTime  @updatedAt
  
  
}

model PackageReport {
  id              Int       @id @default(autoincrement())
  name            String
  type            String
  parameters      Json
  schedule        String?
  recipients      String[]
  lastRun         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  userId    Int?     // Optional, for failed attempts by non-existent users
  user      User?    @relation(fields: [userId], references: [id])
  email     String?  // Email of the login attempt
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
  status    String   // "SUCCESS" o "FAILED"
  reason    String?  // Reason for failed login (e.g., "User not found", "Incorrect password")
}

model MicroCreditApplication {
  id              Int      @id @default(autoincrement())
  amount          Float
  purpose         String
  status          String   @default("pending") // pending, approved, rejected, paid
  applicationDate DateTime @default(now())
  approvalDate    DateTime?
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

model SmartMeterReading {
  id        Int      @id @default(autoincrement())
  meterId   String
  unitId    String
  reading   Float
  unit      String // e.g., kWh, m3
  timestamp DateTime @default(now())

  @@index([meterId])
  @@index([unitId])
  @@index([timestamp])
}

model ServiceProvider {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  description String
  contactPhone String
  contactEmail String
  address     String
  rating      Float
  reviewCount Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]

  @@index([category])
  @@index([name])
}

model Review {
  id                Int      @id @default(autoincrement())
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId Int
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  userName          String
  rating            Int
  comment           String?
  createdAt         DateTime @default(now())

  @@index([serviceProviderId])
  @@index([userId])
}

model Survey {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   @default("draft") // draft, active, completed
  startDate   DateTime
  endDate     DateTime
  createdBy   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  questions   Question[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model Question {
  id        Int      @id @default(autoincrement())
  surveyId  Int
  survey    Survey   @relation(fields: [surveyId], references: [id])
  text      String
  options   Option[]

  @@index([surveyId])
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  votes      Int      @default(0) // Denormalized vote count
  userVotes  UserVote[]

  @@index([questionId])
}

model UserVote {
  id        Int      @id @default(autoincrement())
  voteId    Int
  vote      Vote     @relation(fields: [voteId], references: [id])
  optionId  Int
  option    Option   @relation(fields: [optionId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  weight    Float    @default(1.0)
  createdAt DateTime @default(now())

  @@unique([voteId, userId]) // Ensure one vote per user per vote
  @@index([voteId])
  @@index([optionId])
  @@index([userId])
}

model PaymentAttempt {
  id            Int      @id @default(autoincrement())
  feeId         Int
  fee           Fee      @relation(fields: [feeId], references: [id])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  amount        Float
  paymentMethod String
  transactionId String   @unique
  status        String   // PENDING, COMPLETED, FAILED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([feeId])
  @@index([userId])
  @@index([transactionId])
}

model Attendance {
  id         Int      @id @default(autoincrement())
  assemblyId Int
  assembly   Assembly @relation(fields: [assemblyId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  present    Boolean
  joinedAt   DateTime @default(now())

  @@unique([userId, assemblyId])
  @@index([assemblyId])
  @@index([userId])
}

model Assembly {
  id                       Int        @id @default(autoincrement())
  title                    String
  description              String
  scheduledDate            DateTime
  location                 String
  type                     String
  status                   String     @default("SCHEDULED")
  agenda                   String
  createdBy                Int
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  attendances              Attendance[]
  votes                    Vote[]
  currentAttendance        Int        @default(0)
  quorumMet                Boolean    @default(false)
  totalRegisteredAttendees Int        @default(0) // Placeholder for total attendees for quorum calculation

  @@index([status])
  @@index([scheduledDate])
}

model Vote {
  id          Int      @id @default(autoincrement())
  assemblyId  Int
  assembly    Assembly @relation(fields: [assemblyId], references: [id])
  question    String
  options     Json // Store options as JSON array of strings
  isWeighted  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userVotes   UserVote[]

  @@index([assemblyId])
  @@index([isActive])
}

// --- Marketplace Comunitario ---

model Listing {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  images      String[]
  isSold      Boolean   @default(false)
  reports     Report[]
  messages    Message[]
  reportedListings ReportedListing[]
  complexId   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])

  @@index([authorId])
  @@index([complexId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  sender    User     @relation("sentMessages", fields: [senderId], references: [id])
  senderId  Int
  receiver  User     @relation("receivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  listingId Int
  listing   Listing  @relation(fields: [listingId], references: [id])
  createdAt DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
  @@index([listingId])
}

model Report {
  id        Int      @id @default(autoincrement())
  reason    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  reporter  User     @relation(fields: [reporterId], references: [id])
  reporterId Int
  createdAt DateTime @default(now())

  @@index([listingId])
  @@index([reporterId])
}

model ReportedListing {
  id        Int      @id @default(autoincrement())
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  reporter  User     @relation("ReportedListings", fields: [reporterId], references: [id])
  reporterId Int
  reason    String
  status    String   @default("PENDING") // PENDING, RESOLVED, REJECTED
  createdAt DateTime @default(now())

  @@index([listingId])
  @@index([reporterId])
  @@index([status])
}

model Fee {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  amount      Float
  type        String   // ORDINARY, EXTRAORDINARY, PENALTY, OTHER
  dueDate     DateTime
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])
  status      String   @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED, PARTIAL
  paymentDate DateTime?
  receiptNumber String?
  paymentMethod String?
  paymentReference String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments    Payment[]
  paymentAttempts PaymentAttempt[]
  createdBy   User     @relation("CreatedFees", fields: [createdById], references: [id])
  createdById Int

  @@index([propertyId])
  @@index([type])
  @@index([status])
  @@index([dueDate])
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  method      String
  reference   String
  receiptNumber String
  description String?
  feeId       Int
  fee         Fee      @relation(fields: [feeId], references: [id])
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])
  createdBy   Int
  user        User     @relation("CreatedPayments", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([feeId])
  @@index([propertyId])
  @@index([date])
}

model Property {
  id          Int      @id @default(autoincrement())
  unitNumber  String
  complexId   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])
  ownerId     Int
  owner       User     @relation("OwnedProperties", fields: [ownerId], references: [id])
  type        String // e.g., apartment, house, commercial
  area        Float?
  bedrooms    Int?
  bathrooms   Int?
  address     String?
  fees        Fee[]
  payments    Payment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([complexId, unitNumber])
  @@index([ownerId])
}

model Budget {
  id          Int      @id @default(autoincrement())
  year        Int
  month       Int
  title       String
  description String?
  totalAmount Float
  approvedDate DateTime?
  status      String   @default("DRAFT") // DRAFT, APPROVED, EXECUTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       BudgetItem[]
  createdBy   User     @relation("CreatedBudgets", fields: [createdById], references: [id])
  createdById Int

  @@unique([year, month])
  @@index([status])
}

model BudgetItem {
  id          Int      @id @default(autoincrement())
  budgetId    Int
  budget      Budget   @relation(fields: [budgetId], references: [id])
  description String
  amount      Float
  category    String
  order       Int

  @@index([budgetId])
}

model Survey {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   @default("draft") // draft, active, completed
  startDate   DateTime
  endDate     DateTime
  createdBy   Int
  creator     User     @relation("CreatedSurveys", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  questions   Question[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model Question {
  id        Int      @id @default(autoincrement())
  surveyId  Int
  survey    Survey   @relation(fields: [surveyId], references: [id])
  text      String
  options   Option[]

  @@index([surveyId])
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  votes      Int      @default(0) // Denormalized vote count
  userVotes  UserVote[]

  @@index([questionId])
}

model UserVote {
  id        Int      @id @default(autoincrement())
  voteId    Int
  vote      Vote     @relation(fields: [voteId], references: [id])
  optionId  Int
  option    Option   @relation(fields: [optionId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  weight    Float    @default(1.0)
  createdAt DateTime @default(now())

  @@unique([voteId, userId]) // Ensure one vote per user per vote
  @@index([voteId])
  @@index([optionId])
  @@index([userId])
}

model ServiceProvider {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  description String
  contactPhone String
  contactEmail String
  address     String
  rating      Float
  reviewCount Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  createdBy   User     @relation("CreatedServiceProviders", fields: [createdById], references: [id])
  createdById Int

  @@index([category])
  @@index([name])
}

model Review {
  id                Int      @id @default(autoincrement())
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId Int
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  userName          String
  rating            Int
  comment           String?
  createdAt         DateTime @default(now())

  @@index([serviceProviderId])
  @@index([userId])
}

model Document {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  url         String
  type        String // e.g., 'GENERAL', 'FINANCIAL', 'LEGAL', 'ASSEMBLY'
  uploadedBy  Int
  uploader    User     @relation("CreatedDocuments", fields: [uploadedBy], references: [id])
  uploadedAt  DateTime @default(now())

  @@index([type])
  @@index([uploadedBy])
}

model Visitor {
  id              Int       @id @default(autoincrement())
  name            String
  documentType    DocumentType
  documentNumber  String
  destination     String
  residentName    String?
  entryTime       DateTime
  exitTime        DateTime?
  plate           String?
  photoUrl        String?
  status          VisitorStatus
  notes           String?
  preRegisterId   Int?
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  accessPassId    Int?
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  purpose         String?
  company         String?
  temperature     Float?
  belongings      Json?
  signature       String?
  registeredBy    Int
  registrar       User      @relation("RegisteredVisitors", fields: [registeredBy], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accessLogs      AccessLog[]
  
  @@index([documentType, documentNumber])
  @@index([status])
  @@index([entryTime])
  @@index([destination])
  @@index([preRegisterId])
  
  
}

model Package {
  id                Int             @id @default(autoincrement())
  trackingCode      String?
  type              PackageType
  trackingNumber    String?
  courier           String?
  senderName        String?
  senderCompany     String?
  residentId        Int?
  unitId            Int
  unitNumber        String
  residentName      String
  receivedAt        DateTime
  notifiedAt        DateTime?
  deliveredAt       DateTime?
  expirationDate    DateTime?
  status            PackageStatus   @default(RECEIVED)
  priority          PackagePriority @default(NORMAL)
  receivedByStaffId Int
  receivedByStaffName String
  deliveredByStaffId Int?
  deliveredByStaffName String?
  receivedByResidentId Int?
  receivedByResidentName String?
  size              String?
  weight            Float?
  isFragile         Boolean         @default(false)
  needsRefrigeration Boolean        @default(false)
  description       String?
  notes             String?
  tags              String[]
  mainPhotoUrl      String?
  attachments       Json?
  signatureUrl      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  statusHistory     PackageStatusHistory[]
  notifications     PackageNotification[]
  registeredBy      User            @relation("RegisteredPackages", fields: [registeredBy], references: [id])
  registeredBy      Int
  
  @@index([status])
  @@index([receivedAt])
  @@index([unitNumber])
  @@index([residentId])
  @@index([trackingCode])
  @@index([trackingNumber])
  
  
}
