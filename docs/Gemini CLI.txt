Gemini CLI

Ejecute la CLI: ejecute el siguiente comando en su terminal:
npx https://github.com/google-gemini/gemini-cli

O instálalo con:
npm install -g @google/gemini-cli
gemini

Enterprise plan with higher limits at  https://goo.gle/set-up-gemini-code-assist
Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key
You can switch authentication methods by typing /auth


https://github.com/CIDESOLUTIONS/app_armonia.git

Prompt manus
Interacciones solo en español. Actúa como un experto en desarrollo full stack, arquitectura de software y auditoría técnica de aplicaciones web y móviles, aplicando buenas y modernas prácticas (Clean Code, SOLID, TDD, CI/CD, etc.). clona el proyecto "Armonía", una aplicación web y móvil ubicado en el repositorio https://github.com/CIDESOLUTIONS/app_armonia.git .Las especificaciones técnicas y funcionales se encuentran en la carpeta docs. Su tarea principal es revisar exhaustivamente dichas especificaciones y compararlas con el código actual del proyecto, a partir de esa comparación, debe generar un informe que incluya: un resumen funcional, técnico y de estilo del estado actual; una lista clara de diferencias entre lo especificado y lo implementado, identificación de funcionalidades faltantes, incompletas o que deban ajustarse. Evalúa especialmente que cumpla con estrictamente con el stack tecnológico del frontend (Next.js, React, TypeScript, Prisma, shadcn/ui, zustand) y backend (NestJS) y verifica desde el acceso a la landing page (clave para conversión) hasta todos los portales (Administrador del conjunto residencial, Residentes, Recepción/Vigilancia y la Consola de Administración de la aplicación) cumplan el detalle funcional, evalúa la adopción del modelo de negocio incluyendo el plan empresarial, y el uso del modulo de democracia digital para que pueda ser integrado o independiente. Evalúa si se están aplicando estándares modernos de calidad, accesibilidad, rendimiento, seguridad y mantenibilidad. Si se detectan problemas, sugiere correcciones o mejoras específicas. Verifica si es conveniente, eliminar dependencias o funciones innecesarias, optimizar estructuras para mejorar eficiencia.si se requiere desarrollar desde cero respeta el estilo del proyecto. Evita proponer múltiples alternativas para una misma solución salvo que se indique lo contrario. No repitas recomendaciones ya evaluadas. Posteriormente, crea y ejecuta individualmente y luego de forma masivas las pruebas unitarias e integrales (E2E). Luego, deja la aplicación lista para su despliegue en producción. Finalmente, genera un plan de trabajo detallado, ordenado por prioridad y dependencias, con todas las tareas necesarias para alinear el desarrollo con los requisitos del proyecto al 100%. Mantén este contexto en memoria como guía principal hasta la finalización completa del trabajo. Comienza leyendo las especificaciones técnicas en docs y luego continuas sistemáticamente con lo solicitado.

ajuste prompt chatgpt
Interacciones solo en español. Actúas como un experto en desarrollo full stack, arquitectura de software y auditoría técnica de aplicaciones web y móviles, aplicando buenas y modernas prácticas (Clean Code, SOLID, TDD, CI/CD, etc.). Estás ubicado en el directorio raíz del proyecto "Armonía", una aplicación web y móvil. Las especificaciones técnicas y funcionales se encuentran en la carpeta docs. Tu tarea principal es revisar exhaustivamente dichas especificaciones y compararlas con el código actual del proyecto. A partir de esa comparación, debes generar un informe que incluya: un resumen funcional, técnico y de estilo del estado actual; una lista clara de diferencias entre lo especificado y lo implementado; e identificación de funcionalidades faltantes, incompletas o que deban ajustarse. Evalúa especialmente desde el acceso a la landing page (clave para conversión) hasta todos los portales: Administrador del conjunto residencial, Residentes, Recepción/Vigilancia y la Consola de Administración de la aplicación. Evalúa si se están aplicando estándares modernos de calidad, accesibilidad, rendimiento, seguridad y mantenibilidad. Si se detectan problemas, sugiere correcciones o mejoras específicas. Verifica si es conveniente, eliminar dependencias o funciones innecesarias, optimizar estructuras o reorganizar la arquitectura para mejorar eficiencia. Antes de desarrollar nuevo código, es muy importante revisar el historial de la carpeta .git para rescatar implementaciones descartadas. Si no existen, desarrolla desde cero respetando el estilo del proyecto. Evita proponer múltiples alternativas para una misma solución salvo que se indique lo contrario. No repitas recomendaciones ya evaluadas. Posteriormente, crea y ejecuta individualmente y luego de forma masivas las pruebas unitarias e integrales (E2E). Luego, deja la aplicación lista para su despliegue en producción. Finalmente, genera un plan de trabajo detallado, ordenado por prioridad y dependencias, con todas las tareas necesarias para alinear el desarrollo con los requisitos del proyecto. Mantén este contexto en memoria como guía principal hasta la finalización completa del trabajo. Comienza leyendo las especificaciones en docs/, resume sus puntos clave y procede paso a paso siguiendo este flujo.




Con análisis de mercado
Interacciones solo en español. Actúa como un experto en desarrollo full stack, arquitectura de software y auditoría técnica de aplicaciones web y móviles, aplicando buenas y modernas prácticas. Está en el directorio raíz del proyecto "Armonía", una aplicación web y móvil. Las especificaciones técnicas y funcionales están en la carpeta docs. Su tarea principal es revisar exhaustivamente dichas especificaciones y compararlas con el código actual del proyecto, a partir de esa comparación, debe generar un informe que incluya: un resumen funcional, técnico y de estilo del estado actual; una lista clara de diferencias entre las funcionalidades especificadas y lo implementado, identificación de funcionalidades faltantes, incompletas o que deban ajustarse. Evalúa especialmente que cumpla con estrictamente con el stack tecnológico y verifica los flujos desde el acceso a la landing page (clave para conversión) hasta todos los portales (Administrador del conjunto residencial, Residentes, Recepción/Vigilancia y la Consola de Administración de la aplicación) cumplan el detalle funcional, evalúa la adopción del modelo de negocio incluyendo el plan empresarial, y el uso del modulo de democracia digital para que pueda ser integrado o independiente. Evalúa si se están aplicando estándares modernos de calidad, accesibilidad, rendimiento, seguridad y mantenibilidad. Si se detectan problemas, realiza las correcciones. Verifica si es conveniente eliminar dependencias o funciones innecesarias, optimizar estructuras para mejorar eficiencia.si se requiere desarrollar desde cero respeta el estilo del proyecto. Evita proponer múltiples alternativas para una misma solución salvo que se indique lo contrario. No repitas recomendaciones ya evaluadas. Posteriormente, crea y ejecuta individualmente y luego de forma masivas las pruebas unitarias (Vitest) e integrales (E2E). Luego, deja la aplicación lista para su despliegue en producción. Finalmente, genera un plan de trabajo detallado, ordenado por prioridad y dependencias, con todas las tareas necesarias para alinear el desarrollo con los requisitos del proyecto al 100%. Mantén este contexto en memoria como guía principal hasta la finalización completa del trabajo. Comienza leyendo las especificaciones técnicas en docs y luego continuas sistemáticamente con lo solicitado. 


 

Iniciar la aplicación: Ejecutar tsx server.ts & en segundo plano.
Ejecutar pruebas Playwright: Ejecutar npx playwright test.
Detener la aplicación: Una vez que las pruebas finalicen, detener el proceso del servidor.


Interacciones solo en español. Actúa como un experto en desarrollo full stack, arquitectura de software y auditoría técnica de aplicaciones web y móviles, aplicando buenas y modernas prácticas. Está en el directorio raíz del proyecto "Armonía", una aplicación web y móvil. Las especificaciones técnicas y funcionales están en la carpeta docs. Su tarea principal es revisar exhaustivamente dichas especificaciones y compararlas con el código actual del proyecto, a partir de esa comparación, debe generar un informe que incluya: un resumen funcional, técnico y de estilo del estado actual; una lista clara de diferencias entre las funcionalidades especificadas y lo implementado, identificación de funcionalidades faltantes, incompletas o que deban ajustarse. Evalúa especialmente que cumpla estrictamente con lo definido en la s especificaciones tanto técnica como el detalle funcional, evalúa la adopción del modelo de negocio incluyendo el plan empresarial, y el uso del modulo de democracia digital para que pueda ser usado integrado y de forma independiente. Evalúa si se están aplicando estándares modernos de calidad, accesibilidad, rendimiento, seguridad y mantenibilidad. Si se detectan problemas, realiza las correcciones. Verifica si es conveniente eliminar dependencias o funciones innecesarias, optimizar estructuras para mejorar eficiencia.si se requiere desarrollar desde cero respeta el estilo del proyecto. Evita proponer múltiples alternativas para una misma solución salvo que se indique lo contrario. No repitas recomendaciones ya evaluadas. Posteriormente, crea y ejecuta individualmente y luego de forma masivas las pruebas unitarias e integrales (E2E). Luego, deja la aplicación lista para su despliegue en producción. Finalmente, genera un plan de trabajo detallado, ordenado por prioridad y dependencias, con todas las tareas necesarias para alinear el desarrollo con los requisitos del proyecto al 100% y lograr el objetivo del despliegue a producción. Mantén este contexto en memoria como guía principal hasta la finalización completa del trabajo. Comienza leyendo las especificaciones técnicas en docs y luego continuas sistemáticamente con lo solicitado. 


 Informe Final de Auditoría y Plan de Trabajo Consolidado - Proyecto Armonía

  Fecha: 17 de julio de 2025
  Versión de Especificaciones Auditada: 16

  1. Resumen Ejecutivo

  El proyecto "Armonía" se encuentra en una fase de desarrollo avanzada pero heterogénea. La arquitectura y la base tecnológica son sólidas y modernas. Los portales de Administración y Recepción poseen módulos troncales (Inventario, PQR, Dashboards, Pánico) que están funcionales y bien implementados, demostrando una alta capacidad técnica. Sin embargo, existe una brecha significativa en funcionalidades orientadas al usuario final (Residente) y en módulos de entrada de datos (Paquetería), los cuales existen como prototipos de interfaz de  usuario de alta fidelidad pero sin persistencia de datos (sin conexión a backend). Adicionalmente, módulos estratégicos clave como  "Democracia Digital" y el portal "Armonía Portafolio" no han sido iniciados. El proyecto también presenta inconsistencias menores en la
  estructura de rutas que deben ser corregidas.


julio 18.
Interacciones solo en español. Actúa como un experto en desarrollo full stack, arquitectura de software y auditoría técnica de aplicaciones web y móviles, aplicando buenas y modernas prácticas. Está en el directorio raíz del proyecto "Armonía", una aplicación web y móvil. Las especificaciones técnicas y funcionales están en la carpeta docs. Su tarea principal es revisar exhaustivamente dichas especificaciones y compararlas con el código actual del proyecto, a partir de esa comparación, genera una lista de verificación de todas y cada una de las funcionalidades desde la Landing page y pasando por cada uno de los portales y sus opciones, evalúa la adopción del modelo de negocio incluyendo el plan empresarial, y el uso del modulo de democracia digital para que pueda ser usado integrado y de forma independiente. Evalúa si se están aplicando estándares modernos de calidad, accesibilidad, rendimiento, seguridad y mantenibilidad. Verifica si es conveniente eliminar dependencias o funciones innecesarias, optimizar estructuras para mejorar eficiencia. Si se detectan problemas, realiza las correcciones, si se requiere desarrollar desde cero respeta el estilo del proyecto. Evita proponer múltiples alternativas para una misma solución y se respetuoso con el trabajo ya realizado. No repitas recomendaciones ya evaluadas evitando los loops. no realces pruebas aún. genera un plan de trabajo detallado, ordenado por prioridad y dependencias, con todas las tareas necesarias para alinear el desarrollo con los requisitos del proyecto al 100% y lograr el objetivo del despliegue a producción. Mantén este contexto en memoria como guía principal hasta la finalización completa del trabajo. Comienza leyendo las especificaciones técnicas en docs y luego continuas sistemáticamente con lo solicitado. 


Posteriormente, crea y ejecuta individualmente y luego de forma masivas las pruebas unitarias (Vitest) e integrales (E2E). Luego, deja la aplicación lista para su despliegue en producción. Finalmente, genera un plan de trabajo detallado, ordenado por prioridad y dependencias, con todas las tareas necesarias para alinear el desarrollo con los requisitos del proyecto al 100% y lograr el objetivo del despliegue a producción. Mantén este contexto en memoria como guía principal hasta la finalización completa del trabajo. Comienza leyendo las especificaciones técnicas en docs y luego continuas sistemáticamente con lo solicitado. 


 Fase 1: Análisis Fundacional y Alineación Técnica (Prioridad: Crítica) (ok)

  Esta fase sienta las bases para todo el trabajo posterior. No se puede construir sobre cimientos inestables.

   * 1.1. Auditoría y Racionalización de Dependencias:
       * Tarea: Revisar todas las dependencias en package.json.
       * Acción: Identificar y eliminar paquetes redundantes o innecesarios. Por ejemplo, se observan jspdf, pdf-lib y pdfkit; se debe unificar a una sola librería (pdfkit según especificaciones) para la generación de PDFs. Investigar el uso de firebase-admin que no está en las especificaciones y validar si es reemplazable por una solución ya integrada.
       * Objetivo: Reducir el tamaño del build, simplificar el mantenimiento y eliminar posibles vectores de vulnerabilidades.

   * 1.2. Refuerzo de la Calidad del Código:
       * Tarea: Configurar y aplicar de forma estricta las herramientas de linting y formateo.
       * Acción: Revisar la configuración de ESLint y Prettier para que se alinee con las guías de estilo de Next.js/React y TypeScript. Ejecutar lint --fix en toda la base de código para corregir inconsistencias iniciales.
       * Objetivo: Garantizar un estilo de código homogéneo y legible en todo el proyecto.

   * 1.3. Verificación de la Arquitectura del Frontend:
       * Tarea: Auditar la estructura de directorios en src/app.
       * Acción: Asegurar que la estructura siga las convenciones del App Router de Next.js 15. Planificar la migración de cualquier lógica de negocio que resida incorrectamente en los componentes hacia services/ o lib/.
       * Objetivo: Mejorar la separación de responsabilidades y la mantenibilidad.

  
Fase 2: Refactorización y Desarrollo de Módulos Centrales (Prioridad: Alta)

  Se abordarán los portales principales que impactan directamente en la experiencia del usuario final.

   * 2.1. Portal Público (Landing Page):
       * Tarea: Comparar la implementación actual con las especificaciones.
       * Acción: Revisar src/app/public/landing/page.tsx (o su equivalente). Implementar las secciones faltantes (videos de flujos, detalles de planes) y asegurar que los llamados a la acción
         (CTA) sean claros y efectivos para la conversión. Optimizar para SEO según las especificaciones.

   * 2.2. Flujos de Autenticación y Seguridad:
       * Tarea: Auditar el sistema de autenticación y la protección de rutas.
       * Acción: Revisar la implementación de next-auth y el middleware.ts. Asegurar que el manejo de JWT sea seguro y que las rutas de cada portal estén correctamente protegidas según el rol
         del usuario.

   * 2.3. Portal de Administración:
       * Tarea: Refactorizar y completar cada submódulo.
       * Acción: Auditar sistemáticamente: Dashboard, Inventario, Comunicaciones, Financiero (verificando la generación de cuotas, multas e intereses), Reservas y el nuevo módulo de Gestión
         de Proyectos. Se priorizará la funcionalidad de Conciliación Bancaria Automática como un diferenciador clave del plan Premium.

   * 2.4. Portal de Residentes: (ok)
       * Tarea: Implementar funcionalidades clave para el engagement.
       * Acción: Además de revisar las funciones básicas (pagos, reservas), el foco principal será el desarrollo completo del Marketplace Comunitario según las detalladas especificaciones:
         creación/gestión de anuncios, mensajería interna y panel de moderación para el administrador.

   * 2.5. Portal de Seguridad (IoT-Ready):
       * Tarea: Materializar las funcionalidades de alto valor.
       * Acción: Desarrollar la Gestión Avanzada de Visitantes con QR y el sistema de notificación de Paquetería. Esto implica trabajo tanto en el frontend (app de residente) como en el portal de seguridad.

  Fase 3: Desarrollo de Módulos Estratégicos y de Negocio (Prioridad: Media-Alta)

  Estos módulos son cruciales para el crecimiento, la monetización y la ventaja competitiva del proyecto.

   * 3.1. Módulo de Democracia Digital (Asambleas):
       * Tarea: Desarrollar la plataforma y su modelo de servicio desagregado.
       * Acción: Implementar el flujo completo de asambleas (quorum, votaciones, actas). Diseñar la arquitectura para que este módulo pueda funcionar de forma integrada (Plan Premium) y como un producto independiente ("Asambleas por Armonía").

   * 3.2. Portal Empresarial "Armonía Portafolio":
       * Tarea: Construir el dashboard para empresas de administración.
       * Acción: Desarrollar la vista multi-propiedad, la navegación centralizada, los informes consolidados y la funcionalidad de white-labeling. Este es un desarrollo mayor y clave para el modelo B2B.

   * 3.3. Módulo de Ecosistema y Alianzas:
       * Tarea: Desarrollar las bases para las integraciones de terceros.
       * Acción: Implementar el Directorio de Servicios Verificados. Diseñar y construir la capa de API necesaria para futuras alianzas (InsurTech, FinTech) y para la integración con Medidores Inteligentes (IoT).

  Fase 4: Calidad, Pruebas y Preparación para Producción (Prioridad: Media - Continua)

  Aunque no se ejecuten pruebas masivas ahora, se preparará el terreno.

   * 4.1. Estructura de Pruebas:
       * Tarea: Preparar el entorno para pruebas unitarias y E2E.
       * Acción: Definir la estructura y configuración para Vitest y Playwright. Crear archivos de prueba (.spec.ts) vacíos para los componentes y servicios críticos que se vayan desarrollando o refactorizando, listos para ser implementados.

   * 4.2. Accesibilidad e Internacionalización (i18n):
       * Tarea: Garantizar el cumplimiento de los estándares.
       * Acción: Realizar una auditoría de accesibilidad (WCAG 2.1 AA) en los componentes de Shadcn/UI. Asegurar que la implementación de next-intl sea consistente y cubra todos los textos visibles para el usuario, preparando los archivos para español, inglés y portugués.

   * 4.3. Optimización Final y Despliegue:
       * Tarea: Asegurar que la aplicación esté lista para un rendimiento óptimo.
       * Acción: Analizar los Core Web Vitals, revisar la configuración de seguridad (CSP, CORS), y validar que el script de build de producción se ejecute sin errores.

  Procederé a guardar este plan en memoria para utilizarlo como nuestra hoja de ruta. Comenzaré con la Fase 1, iniciando por la tarea 1.1. Auditoría y Racionalización de Dependencias.

  ¿Estás de acuerdo con este plan de acción?
 
