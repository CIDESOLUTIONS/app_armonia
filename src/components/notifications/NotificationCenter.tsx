// src/components/notifications/NotificationCenter.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { 
  Bell, 
  Send, 
  Users, 
  User,
  MessageSquare,
  Calendar,
  DollarSign,
  AlertTriangle,
  CheckCircle,
  Clock,
  Loader2\n} from 'lucide-react';\nimport { useNotifications, NotificationTarget } from '@/hooks/useNotifications';\nimport { useAuth } from '@/context/AuthContext';\n\ninterface NotificationCenterProps {\n  complexId?: number;\n}\n\nexport function NotificationCenter({ complexId }: NotificationCenterProps) {\n  const { user } = useAuth();\n  const {\n    loading,\n    error,\n    templates,\n    history,\n    sendNotification,\n    sendTemplateNotification,\n    loadTemplates,\n    loadHistory,\n    sendPaymentReminder,\n    sendAssemblyInvitation,\n    sendIncidentUpdate,\n    sendPQRResponse,\n    sendGeneralAnnouncement\n  } = useNotifications();\n\n  // Estados para formularios\n  const [activeTab, setActiveTab] = useState('quick');\n  const [quickForm, setQuickForm] = useState({\n    title: '',\n    message: '',\n    target: 'all',\n    priority: 'normal'\n  });\n  const [templateForm, setTemplateForm] = useState({\n    type: '',\n    data: {} as Record<string, any>,\n    target: 'all'\n  });\n  const [sendSuccess, setSendSuccess] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadTemplates();\n    loadHistory();\n  }, [loadTemplates, loadHistory]);\n\n  // Limpiar mensaje de éxito después de 3 segundos\n  useEffect(() => {\n    if (sendSuccess) {\n      const timer = setTimeout(() => setSendSuccess(null), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [sendSuccess]);\n\n  const handleQuickSend = async () => {\n    if (!quickForm.title || !quickForm.message) {\n      return;\n    }\n\n    const target: NotificationTarget = quickForm.target === 'all' \n      ? { all: true }\n      : { role: quickForm.target as any };\n\n    const success = await sendNotification(\n      {\n        title: quickForm.title,\n        body: quickForm.message,\n        icon: '/icons/notification.png'\n      },\n      target,\n      {\n        priority: quickForm.priority as 'normal' | 'high',\n        requireInteraction: quickForm.priority === 'high'\n      }\n    );\n\n    if (success) {\n      setSendSuccess('Notificación enviada exitosamente');\n      setQuickForm({ title: '', message: '', target: 'all', priority: 'normal' });\n    }\n  };\n\n  const handleTemplateSend = async () => {\n    if (!templateForm.type) {\n      return;\n    }\n\n    const target: NotificationTarget = templateForm.target === 'all'\n      ? { all: true }\n      : { role: templateForm.target as any };\n\n    const success = await sendTemplateNotification(\n      templateForm.type,\n      templateForm.data,\n      target\n    );\n\n    if (success) {\n      setSendSuccess(`Notificación '${templates[templateForm.type]?.name}' enviada exitosamente`);\n      setTemplateForm({ type: '', data: {}, target: 'all' });\n    }\n  };\n\n  const getTargetIcon = (target: string) => {\n    switch (target) {\n      case 'all': return <Users className=\"h-4 w-4\" />;\n      case 'ADMIN': return <User className=\"h-4 w-4\" />;\n      case 'RESIDENT': return <User className=\"h-4 w-4\" />;\n      case 'RECEPTION': return <User className=\"h-4 w-4\" />;\n      default: return <Users className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'scheduled': return <Clock className=\"h-4 w-4 text-blue-600\" />;\n      case 'failed': return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      default: return <Bell className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const renderTemplateForm = () => {\n    if (!templateForm.type || !templates[templateForm.type]) {\n      return null;\n    }\n\n    const template = templates[templateForm.type];\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900\">{template.name}</h4>\n          <p className=\"text-sm text-blue-700\">{template.description}</p>\n        </div>\n        \n        {template.requiredData.map((field) => (\n          <div key={field}>\n            <Label htmlFor={field} className=\"capitalize\">\n              {field.replace(/([A-Z])/g, ' $1').toLowerCase()}\n            </Label>\n            <Input\n              id={field}\n              value={templateForm.data[field] || ''}\n              onChange={(e) => setTemplateForm({\n                ...templateForm,\n                data: { ...templateForm.data, [field]: e.target.value }\n              })}\n              placeholder={`Ingresa ${field.toLowerCase()}`}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  // Verificar permisos\n  if (!user || !['ADMIN', 'COMPLEX_ADMIN', 'RECEPTION'].includes(user.role)) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              No tienes permisos para acceder al centro de notificaciones.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Bell className=\"h-6 w-6\" />\n            Centro de Notificaciones\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Envía notificaciones push a residentes y personal\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\">\n            Plan: {user?.complexPlan || 'Básico'}\n          </Badge>\n          {loading && <Loader2 className=\"h-4 w-4 animate-spin\" />}\n        </div>\n      </div>\n\n      {/* Mensajes de estado */}\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {sendSuccess && (\n        <Alert>\n          <CheckCircle className=\"h-4 w-4\" />\n          <AlertDescription>{sendSuccess}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Tabs principales */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"quick\">Envío Rápido</TabsTrigger>\n          <TabsTrigger value=\"templates\">Plantillas</TabsTrigger>\n          <TabsTrigger value=\"history\">Historial</TabsTrigger>\n        </TabsList>\n\n        {/* Tab: Envío Rápido */}\n        <TabsContent value=\"quick\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Send className=\"h-5 w-5\" />\n                Envío Rápido\n              </CardTitle>\n              <CardDescription>\n                Envía una notificación personalizada inmediatamente\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Título</Label>\n                <Input\n                  id=\"title\"\n                  value={quickForm.title}\n                  onChange={(e) => setQuickForm({ ...quickForm, title: e.target.value })}\n                  placeholder=\"Título de la notificación\"\n                  maxLength={100}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"message\">Mensaje</Label>\n                <Textarea\n                  id=\"message\"\n                  value={quickForm.message}\n                  onChange={(e) => setQuickForm({ ...quickForm, message: e.target.value })}\n                  placeholder=\"Contenido del mensaje\"\n                  maxLength={500}\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"target\">Destinatarios</Label>\n                  <Select\n                    value={quickForm.target}\n                    onValueChange={(value) => setQuickForm({ ...quickForm, target: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos los residentes</SelectItem>\n                      <SelectItem value=\"RESIDENT\">Solo residentes</SelectItem>\n                      <SelectItem value=\"ADMIN\">Solo administradores</SelectItem>\n                      <SelectItem value=\"RECEPTION\">Solo recepción</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"priority\">Prioridad</Label>\n                  <Select\n                    value={quickForm.priority}\n                    onValueChange={(value) => setQuickForm({ ...quickForm, priority: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"normal\">Normal</SelectItem>\n                      <SelectItem value=\"high\">Alta</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleQuickSend} \n                disabled={loading || !quickForm.title || !quickForm.message}\n                className=\"w-full\"\n              >\n                {loading ? (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <Send className=\"h-4 w-4 mr-2\" />\n                )}\n                Enviar Notificación\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab: Plantillas */}\n        <TabsContent value=\"templates\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                Plantillas de Notificación\n              </CardTitle>\n              <CardDescription>\n                Usa plantillas predefinidas para casos comunes\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"template-type\">Tipo de Notificación</Label>\n                <Select\n                  value={templateForm.type}\n                  onValueChange={(value) => setTemplateForm({ ...templateForm, type: value, data: {} })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecciona una plantilla\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(templates).map(([key, template]) => (\n                      <SelectItem key={key} value={key}>\n                        {template.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {renderTemplateForm()}\n\n              {templateForm.type && (\n                <>\n                  <div>\n                    <Label htmlFor=\"template-target\">Destinatarios</Label>\n                    <Select\n                      value={templateForm.target}\n                      onValueChange={(value) => setTemplateForm({ ...templateForm, target: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todos los residentes</SelectItem>\n                        <SelectItem value=\"RESIDENT\">Solo residentes</SelectItem>\n                        <SelectItem value=\"ADMIN\">Solo administradores</SelectItem>\n                        <SelectItem value=\"RECEPTION\">Solo recepción</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Button \n                    onClick={handleTemplateSend} \n                    disabled={loading || !templateForm.type}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Send className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Enviar con Plantilla\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab: Historial */}\n        <TabsContent value=\"history\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Historial de Notificaciones\n              </CardTitle>\n              <CardDescription>\n                Revisa las notificaciones enviadas recientemente\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {history.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No hay notificaciones en el historial</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {history.map((notification) => (\n                    <div\n                      key={notification.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-4\">\n                        {getStatusIcon(notification.status)}\n                        <div>\n                          <p className=\"font-medium\">{notification.title}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {notification.body}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(notification.sentAt).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <Badge variant=\"outline\">\n                          {notification.recipientCount} destinatarios\n                        </Badge>\n                        <p className=\"text-xs text-muted-foreground mt-1 capitalize\">\n                          {notification.status}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default NotificationCenter;\n