// src/components/reservations/PaymentModal.tsx
'use client';

import React, { useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/components/ui/use-toast';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CreditCard, Clock, DollarSign, AlertCircle, CheckCircle, ExternalLink } from 'lucide-react';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';

interface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  reservation: {\n    id: number;\n    title: string;\n    commonArea: {\n      name: string;\n      feeAmount?: number;\n    };\n    startDateTime: Date | string;\n    endDateTime: Date | string;\n    paymentStatus?: string;\n    requiresPayment: boolean;\n  };\n  onPaymentComplete: () => void;\n}\n\ninterface PaymentInfo {\n  transactionId: string;\n  paymentUrl?: string;\n  amount: number;\n  currency: string;\n  expiresAt?: Date;\n  status: string;\n}\n\nconst PaymentModal: React.FC<PaymentModalProps> = ({\n  isOpen,\n  onClose,\n  reservation,\n  onPaymentComplete\n}) => {\n  const { toast } = useToast();\n  const [isCreatingPayment, setIsCreatingPayment] = useState(false);\n  const [paymentInfo, setPaymentInfo] = useState<PaymentInfo | null>(null);\n  const [paymentStep, setPaymentStep] = useState<'info' | 'payment' | 'confirmation'>('info');\n\n  // Función para crear el pago\n  const handleCreatePayment = async () => {\n    setIsCreatingPayment(true);\n    \n    try {\n      const response = await fetch(`/api/reservations/${reservation.id}/payment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          returnUrl: `${window.location.origin}/reservations/payment-result`\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error al crear el pago');\n      }\n\n      const data = await response.json();\n      setPaymentInfo(data.payment);\n      setPaymentStep('payment');\n\n      toast({\n        title: 'Pago creado',\n        description: 'Se ha generado el enlace de pago exitosamente'\n      });\n\n    } catch (error) {\n      console.error('Error creando pago:', error);\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Error al crear el pago',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsCreatingPayment(false);\n    }\n  };\n\n  // Función para simular confirmación de pago (en desarrollo)\n  const handleSimulatePayment = async (status: 'COMPLETED' | 'FAILED') => {\n    if (!paymentInfo) return;\n\n    try {\n      const response = await fetch(`/api/reservations/${reservation.id}/payment`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          transactionId: paymentInfo.transactionId,\n          gatewayReference: `SIM-${Date.now()}`,\n          status,\n          gatewayResponse: {\n            simulatedPayment: true,\n            timestamp: new Date().toISOString(),\n            status\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error al confirmar el pago');\n      }\n\n      const data = await response.json();\n      \n      if (status === 'COMPLETED') {\n        setPaymentStep('confirmation');\n        toast({\n          title: 'Pago exitoso',\n          description: 'El pago ha sido procesado exitosamente'\n        });\n        onPaymentComplete();\n      } else {\n        toast({\n          title: 'Pago fallido',\n          description: 'El pago no pudo ser procesado',\n          variant: 'destructive'\n        });\n        setPaymentStep('info');\n        setPaymentInfo(null);\n      }\n\n    } catch (error) {\n      console.error('Error confirmando pago:', error);\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Error al confirmar el pago',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  // Función para abrir URL de pago en nueva ventana\n  const handlePaymentRedirect = () => {\n    if (paymentInfo?.paymentUrl) {\n      window.open(paymentInfo.paymentUrl, '_blank');\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-CO', {\n      style: 'currency',\n      currency: 'COP',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusBadge = (status?: string) => {\n    switch (status) {\n      case 'COMPLETED':\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\">Pagado</Badge>;\n      case 'PENDING':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">Pendiente</Badge>;\n      case 'FAILED':\n        return <Badge className=\"bg-red-100 text-red-800 border-red-200\">Fallido</Badge>;\n      default:\n        return <Badge variant=\"outline\">Sin pagar</Badge>;\n    }\n  };\n\n  const renderInfoStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Información de Pago\n        </DialogTitle>\n        <DialogDescription>\n          Detalles del pago requerido para confirmar tu reserva\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"space-y-4\">\n        {/* Información de la reserva */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-2\">{reservation.title}</h4>\n          <p className=\"text-sm text-gray-600 mb-1\">\n            <strong>Área:</strong> {reservation.commonArea.name}\n          </p>\n          <p className=\"text-sm text-gray-600 mb-1\">\n            <strong>Fecha:</strong> {format(new Date(reservation.startDateTime), 'PPP', { locale: es })}\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            <strong>Hora:</strong> {format(new Date(reservation.startDateTime), 'HH:mm')} - {format(new Date(reservation.endDateTime), 'HH:mm')}\n          </p>\n        </div>\n\n        <Separator />\n\n        {/* Información del pago */}\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Tarifa del área común:</span>\n            <span className=\"font-semibold\">\n              {formatCurrency(reservation.commonArea.feeAmount || 0)}\n            </span>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Estado actual:</span>\n            {getStatusBadge(reservation.paymentStatus)}\n          </div>\n\n          <Separator />\n\n          <div className=\"flex justify-between items-center text-lg font-bold\">\n            <span>Total a pagar:</span>\n            <span className=\"text-green-600\">\n              {formatCurrency(reservation.commonArea.feeAmount || 0)}\n            </span>\n          </div>\n        </div>\n\n        {reservation.paymentStatus !== 'COMPLETED' && (\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              El pago es requerido para confirmar tu reserva. Una vez procesado, tu reserva será aprobada automáticamente.\n            </AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose}>\n          Cancelar\n        </Button>\n        {reservation.paymentStatus !== 'COMPLETED' && (\n          <Button \n            onClick={handleCreatePayment} \n            disabled={isCreatingPayment}\n            className=\"bg-green-600 hover:bg-green-700\"\n          >\n            {isCreatingPayment ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                Procesando...\n              </>\n            ) : (\n              <>\n                <DollarSign className=\"h-4 w-4 mr-2\" />\n                Proceder al Pago\n              </>\n            )}\n          </Button>\n        )}\n      </DialogFooter>\n    </>\n  );\n\n  const renderPaymentStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Procesar Pago\n        </DialogTitle>\n        <DialogDescription>\n          Completa tu pago para confirmar la reserva\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"space-y-4\">\n        {paymentInfo && (\n          <>\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                Información del Pago\n              </h4>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>ID de transacción:</strong> {paymentInfo.transactionId}</p>\n                <p><strong>Monto:</strong> {formatCurrency(paymentInfo.amount)} {paymentInfo.currency}</p>\n                {paymentInfo.expiresAt && (\n                  <p><strong>Válido hasta:</strong> {format(new Date(paymentInfo.expiresAt), 'PPP HH:mm', { locale: es })}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Opciones de pago */}\n            <div className=\"space-y-3\">\n              {paymentInfo.paymentUrl && (\n                <Button \n                  onClick={handlePaymentRedirect}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Pagar en Pasarela Externa\n                </Button>\n              )}\n\n              <div className=\"text-center text-sm text-gray-500\">\n                O para pruebas de desarrollo:\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button \n                  onClick={() => handleSimulatePayment('COMPLETED')}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Simular Éxito\n                </Button>\n                <Button \n                  onClick={() => handleSimulatePayment('FAILED')}\n                  variant=\"destructive\"\n                >\n                  <AlertCircle className=\"h-4 w-4 mr-2\" />\n                  Simular Fallo\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={() => {\n          setPaymentStep('info');\n          setPaymentInfo(null);\n        }}>\n          Volver\n        </Button>\n      </DialogFooter>\n    </>\n  );\n\n  const renderConfirmationStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"flex items-center gap-2 text-green-600\">\n          <CheckCircle className=\"h-5 w-5\" />\n          Pago Exitoso\n        </DialogTitle>\n        <DialogDescription>\n          Tu pago ha sido procesado exitosamente\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"space-y-4\">\n        <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n          <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto mb-3\" />\n          <h4 className=\"font-medium text-green-800 mb-2\">¡Pago Completado!</h4>\n          <p className=\"text-sm text-green-700\">\n            Tu reserva ha sido confirmada y aprobada automáticamente.\n          </p>\n        </div>\n\n        {paymentInfo && (\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h5 className=\"font-medium mb-2\">Detalles de la transacción:</h5>\n            <div className=\"space-y-1 text-sm\">\n              <p><strong>ID:</strong> {paymentInfo.transactionId}</p>\n              <p><strong>Monto:</strong> {formatCurrency(paymentInfo.amount)} {paymentInfo.currency}</p>\n              <p><strong>Fecha:</strong> {format(new Date(), 'PPP HH:mm', { locale: es })}</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <DialogFooter>\n        <Button onClick={onClose} className=\"w-full\">\n          Cerrar\n        </Button>\n      </DialogFooter>\n    </>\n  );\n\n  const renderCurrentStep = () => {\n    switch (paymentStep) {\n      case 'payment':\n        return renderPaymentStep();\n      case 'confirmation':\n        return renderConfirmationStep();\n      default:\n        return renderInfoStep();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        {renderCurrentStep()}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default PaymentModal;\n