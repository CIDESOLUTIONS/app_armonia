// Esquema para la Integraci√≥n de Pagos

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enumeraciones
enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model PaymentGateway {
  id                Int               @id @default(autoincrement())
  name              String
  isActive          Boolean           @default(true)
  apiKey            String?
  apiSecret         String?
  merchantId        String?
  accountId         String?
  testMode          Boolean           @default(false)
  supportedMethods  String[]
  webhookUrl        String?
  webhookSecret     String?
  config            Json?
  transactions      Transaction[]
  paymentTokens     PaymentToken[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

model PaymentMethod {
  id                Int               @id @default(autoincrement())
  name              String
  code              String
  isActive          Boolean           @default(true)
  icon              String?
  gatewayMethods    Json
  surcharge         Float             @default(0)
  minAmount         Float?
  maxAmount         Float?
  instructions      String?
  transactions      Transaction[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

model Transaction {
  id                String            @id @default(uuid())
  userId            Int
  invoiceId         Int?
  amount            Float
  currency          String            @default("COP")
  description       String
  status            TransactionStatus
  gatewayId         Int
  gateway           PaymentGateway    @relation(fields: [gatewayId], references: [id])
  methodId          Int
  method            PaymentMethod     @relation(fields: [methodId], references: [id])
  gatewayReference  String?
  gatewayResponse   Json?
  paymentUrl        String?
  paymentData       Json?
  metadata          Json?
  errorCode         String?
  errorMessage      String?
  receiptId         String?
  receiptUrl        String?
  ipAddress         String?
  userAgent         String?
  attempts          Int               @default(1)
  expiresAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([userId])
  @@index([invoiceId])
  @@index([status])
  @@index([gatewayId])
  @@index([createdAt])
  @@schema("tenant")
}

model PaymentToken {
  id                String            @id @default(uuid())
  userId            Int
  gatewayId         Int
  gateway           PaymentGateway    @relation(fields: [gatewayId], references: [id])
  type              String
  token             String
  lastFour          String?
  brand             String?
  expiryMonth       Int?
  expiryYear        Int?
  holderName        String?
  isDefault         Boolean           @default(false)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([userId])
  @@index([gatewayId])
  @@schema("tenant")
}

model PaymentSettings {
  id                Int               @id @default(autoincrement())
  defaultGatewayId  Int?
  allowSaveCards    Boolean           @default(true)
  minPaymentAmount  Float             @default(0)
  maxPaymentAmount  Float?
  paymentExpiry     Int               @default(24)
  autoGenerateReceipt Boolean         @default(true)
  receiptTemplate   String?
  notifyOnPayment   Boolean           @default(true)
  emailSettings     Json?
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

model EarlyPaymentDiscount {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  discountType      DiscountType
  discountValue     Float
  daysBeforeDue     Int
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

model LatePaymentSurcharge {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  surchargeType     DiscountType
  surchargeValue    Float
  daysAfterDue      Int
  maxSurcharge      Float?
  compounding       Boolean           @default(false)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}
