// Esquema para el Sistema de Comunicaciones

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enumeraciones
enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum CommunicationsNotificationType {
  ANNOUNCEMENT
  PQR
  PAYMENT
  RESERVATION
  ASSEMBLY
  SECURITY
  MAINTENANCE
  SYSTEM
  OTHER
}

enum CommunicationsNotificationStatus {
  UNREAD
  READ
  ARCHIVED
  DELETED
}

// Modelo para anuncios
model Announcement {
  id                Int               @id @default(autoincrement())
  title             String
  content           String
  categoryId        Int
  category          AnnouncementCategory @relation(fields: [categoryId], references: [id])
  authorId          Int
  authorName        String
  isPinned          Boolean           @default(false)
  isImportant       Boolean           @default(false)
  publishDate       DateTime          @default(now())
  expiryDate        DateTime?
  attachments       String[]
  visibleToRoles    String[]
  visibleToUnits    String[]
  status            AnnouncementStatus @default(PUBLISHED)
  views             Int               @default(0)
  reactions         Json?
  comments          AnnouncementComment[]
  readBy            AnnouncementRead[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([categoryId])
  @@index([publishDate])
  @@index([status])
  @@schema("tenant")
}

// Modelo para categorías de anuncios
model AnnouncementCategory {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  color             String            @default("#3B82F6")
  icon              String            @default("announcement")
  isDefault         Boolean           @default(false)
  isActive          Boolean           @default(true)
  announcements     Announcement[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

// Modelo para comentarios en anuncios
model AnnouncementComment {
  id                Int               @id @default(autoincrement())
  announcementId    Int
  announcement      Announcement      @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  authorId          Int
  authorName        String
  content           String
  isApproved        Boolean           @default(true)
  parentId          Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([announcementId])
  @@schema("tenant")
}

// Modelo para registro de lecturas de anuncios
model AnnouncementRead {
  id                Int               @id @default(autoincrement())
  announcementId    Int
  announcement      Announcement      @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  userId            Int
  readAt            DateTime          @default(now())

  @@unique([announcementId, userId])
  @@index([announcementId])
  @@index([userId])
  @@schema("tenant")
}

// Modelo para notificaciones
model Notification {
  id                Int               @id @default(autoincrement())
  userId            Int
  title             String
  content           String
  type              CommunicationsNotificationType
  status            CommunicationsNotificationStatus @default(UNREAD)
  relatedEntityType String?
  relatedEntityId   Int?
  actionUrl         String?
  isRead            Boolean           @default(false)
  readAt            DateTime?
  createdAt         DateTime          @default(now())
  expiresAt         DateTime?

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@schema("tenant")
}

// Modelo para configuración de notificaciones por usuario
model NotificationPreference {
  id                Int               @id @default(autoincrement())
  userId            Int
  notificationType  CommunicationsNotificationType
  email             Boolean           @default(true)
  push              Boolean           @default(true)
  inApp             Boolean           @default(true)
  sms               Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([userId, notificationType])
  @@schema("tenant")
}

// Modelo para plantillas de notificaciones
model NotificationTemplate {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  type              CommunicationsNotificationType
  titleTemplate     String
  contentTemplate   String
  emailSubject      String?
  emailTemplate     String?
  pushTemplate      String?
  smsTemplate       String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([type])
  @@schema("tenant")
}
