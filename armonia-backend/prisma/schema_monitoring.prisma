// Esquema para el sistema de monitoreo y pruebas avanzadas

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model MonitoringConfig {
  id                Int       @id @default(autoincrement())
  tenantId          String
  name              String
  description       String?
  isActive          Boolean   @default(true)
  monitoringType    String
  checkInterval     Int
  targetResource    String
  parameters        Json?
  alertThresholds   Json
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  alerts            Alert[]
  checkResults      MonitoringResult[]

  @@index([tenantId])
  @@schema("tenant")
}

model MonitoringResult {
  id                Int       @id @default(autoincrement())
  configId          Int
  config            MonitoringConfig @relation(fields: [configId], references: [id])
  timestamp         DateTime  @default(now())
  status            String
  responseTime      Int?
  value             Float?
  details           Json?
  errorMessage      String?

  @@index([configId, timestamp])
  @@schema("tenant")
}

model Alert {
  id                Int       @id @default(autoincrement())
  configId          Int
  config            MonitoringConfig @relation(fields: [configId], references: [id])
  timestamp         DateTime  @default(now())
  severity          String
  message           String
  details           Json?
  status            String
  acknowledgedBy    User?     @relation("AlertAcknowledger", fields: [acknowledgedById], references: [id])
  acknowledgedById  Int?
  acknowledgedAt    DateTime?
  resolvedAt        DateTime?
  notificationsSent NotificationLog[]

  @@index([configId, status])
  @@index([timestamp])
  @@schema("tenant")
}

model NotificationLog {
  id                Int       @id @default(autoincrement())
  alertId           Int
  alert             Alert     @relation(fields: [alertId], references: [id])
  channel           String
  recipient         String
  sentAt            DateTime  @default(now())
  status            String
  errorMessage      String?

  @@index([alertId])
  @@schema("tenant")
}

model Dashboard {
  id                Int       @id @default(autoincrement())
  tenantId          String
  name              String
  description       String?
  layout            Json
  isPublic          Boolean   @default(false)
  createdBy         User?     @relation(fields: [createdById], references: [id])
  createdById       Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  widgets           DashboardWidget[]

  @@index([tenantId])
  @@schema("tenant")
}

model DashboardWidget {
  id                Int       @id @default(autoincrement())
  dashboardId       Int
  dashboard         Dashboard @relation(fields: [dashboardId], references: [id])
  title             String
  type              String
  dataSource        String
  query             String
  position          Json
  size              Json
  options           Json?

  @@index([dashboardId])
  @@schema("tenant")
}

model TestSuite {
  id                Int       @id @default(autoincrement())
  tenantId          String
  name              String
  description       String?
  type              String
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  testCases         TestCase[]
  testRuns          TestRun[]

  @@index([tenantId])
  @@schema("tenant")
}

model TestCase {
  id                Int       @id @default(autoincrement())
  suiteId           Int
  suite             TestSuite @relation(fields: [suiteId], references: [id])
  name              String
  description       String?
  priority          String
  automated         Boolean   @default(true)
  testData          Json?
  expectedResults   Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  testResults       TestResult[]

  @@index([suiteId])
  @@schema("tenant")
}

model TestRun {
  id                Int       @id @default(autoincrement())
  suiteId           Int
  suite             TestSuite @relation(fields: [suiteId], references: [id])
  startTime         DateTime  @default(now())
  endTime           DateTime?
  status            String
  triggeredBy       User?     @relation(fields: [triggeredById], references: [id])
  triggeredById     Int?
  environment       String
  buildVersion      String?
  results           TestResult[]
  codeCoverage      CodeCoverage[]

  @@index([suiteId, startTime])
  @@schema("tenant")
}

model TestResult {
  id                Int       @id @default(autoincrement())
  runId             Int
  run               TestRun   @relation(fields: [runId], references: [id])
  testCaseId        Int
  testCase          TestCase  @relation(fields: [testCaseId], references: [id])
  status            String
  executionTime     Int
  errorMessage      String?
  stackTrace        String?
  screenshots       String[]
  logs              String?
  metadata          Json?
  createdAt         DateTime  @default(now())
  performanceResults PerformanceTestResult[]

  @@index([runId])
  @@index([testCaseId])
  @@schema("tenant")
}

model PerformanceTestResult {
  id                Int       @id @default(autoincrement())
  testResultId      Int
  testResult        TestResult @relation(fields: [testResultId], references: [id])
  virtualUsers      Int
  totalRequests     Int
  successfulRequests Int
  failedRequests    Int
  avgResponseTime   Float
  p95ResponseTime   Float
  p99ResponseTime   Float
  minResponseTime   Float
  maxResponseTime   Float
  requestsPerSecond Float
  bytesTransferred  Int
  cpuUsage          Float?
  memoryUsage       Float?
  detailedResults   Json

  @@index([testResultId])
  @@schema("tenant")
}

model CodeCoverage {
  id                Int       @id @default(autoincrement())
  testRunId         Int
  testRun           TestRun   @relation(fields: [testRunId], references: [id])
  lineCoverage      Float
  branchCoverage    Float
  functionCoverage  Float
  statementCoverage Float
  uncoveredLines    Json?
  reportUrl         String?
  createdAt         DateTime  @default(now())

  @@index([testRunId])
  @@schema("tenant")
}
