// Esquema para el sistema de visitantes

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enumeraciones para el sistema de visitantes
enum DocumentType {
  CC
  CE
  PASSPORT
  OTHER
}

enum VisitorStatus {
  ACTIVE
  DEPARTED
}

enum AccessPassType {
  SINGLE_USE
  TEMPORARY
  RECURRENT
}

enum AccessPassStatus {
  ACTIVE
  USED
  EXPIRED
  REVOKED
}

enum AccessAction {
  ENTRY
  EXIT
  DENIED
}

// Modelo actualizado para Visitantes
model Visitor {
  id              Int       @id @default(autoincrement())
  name            String    // Nombre del visitante
  documentType    DocumentType // Tipo de documento
  documentNumber  String    // Número de documento
  destination     String    // Destino dentro del conjunto (ej: "Apartamento 101")
  residentName    String?   // Nombre del residente que visita
  entryTime       DateTime  // Hora de entrada
  exitTime        DateTime? // Hora de salida (null si aún no ha salido)
  plate           String?   // Placa del vehículo (si aplica)
  photoUrl        String?   // URL de la foto del visitante
  status          VisitorStatus // Estado del visitante
  notes           String?   // Notas adicionales
  
  // Nuevos campos
  preRegisterId   Int?      // ID del pre-registro (si aplica)
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  accessPassId    Int?      // ID del pase de acceso utilizado
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  purpose         String?   // Propósito de la visita
  company         String?   // Empresa a la que representa (si aplica)
  temperature     Float?    // Temperatura registrada (para protocolos de salud)
  belongings      Json?     // Registro de pertenencias (ej: equipos, paquetes)
  signature       String?   // URL de la firma digital (si se requiere)
  registeredBy    Int       // ID del usuario que registró al visitante
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accessLogs      AccessLog[] // Relación con los registros de acceso
  
  @@index([documentType, documentNumber]) // Búsqueda rápida por documento
  @@index([status]) // Filtrado por estado
  @@index([entryTime]) // Búsqueda por fecha de entrada
  @@index([destination]) // Búsqueda por destino
  @@index([preRegisterId]) // Relación con pre-registro
  
  @@schema("tenant")
}

// Nuevo modelo para Pre-registro de Visitantes
model PreRegisteredVisitor {
  id              Int       @id @default(autoincrement())
  name            String    // Nombre del visitante
  documentType    DocumentType? // Tipo de documento (opcional en pre-registro)
  documentNumber  String?   // Número de documento (opcional en pre-registro)
  residentId      Int       // ID del residente que autoriza
  resident        User      @relation(fields: [residentId], references: [id])
  unitId          Int       // ID de la unidad de destino
  expectedDate    DateTime  // Fecha esperada de visita
  validFrom       DateTime  // Inicio de validez del pre-registro
  validUntil      DateTime  // Fin de validez del pre-registro
  purpose         String?   // Propósito de la visita
  isRecurrent     Boolean   @default(false) // Si es un visitante recurrente
  recurrenceRule  String?   // Regla de recurrencia (ej: "WEEKLY:MON,WED,FRI")
  accessCode      String    // Código único para acceso (QR/alfanumérico)
  status          String    // 'PENDING', 'ACTIVE', 'USED', 'EXPIRED', 'CANCELLED'
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  visitors        Visitor[] // Relación con visitantes registrados
  accessPasses    AccessPass[] // Relación con pases de acceso
  
  @@index([residentId]) // Búsqueda por residente
  @@index([status]) // Filtrado por estado
  @@index([validFrom, validUntil]) // Búsqueda por rango de fechas
  
  @@schema("tenant")
}

// Nuevo modelo para Pases de Acceso
model AccessPass {
  id              Int       @id @default(autoincrement())
  code            String    @unique // Código único del pase
  qrUrl           String    // URL de la imagen QR generada
  type            AccessPassType // Tipo de pase
  validFrom       DateTime  // Inicio de validez
  validUntil      DateTime  // Fin de validez
  usageCount      Int       @default(0) // Número de veces utilizado
  maxUsages       Int       @default(1) // Máximo de usos permitidos
  status          AccessPassStatus // Estado del pase
  
  preRegisterId   Int?      // ID del pre-registro (si aplica)
  preRegister     PreRegisteredVisitor? @relation(fields: [preRegisterId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  visitors        Visitor[] // Relación con visitantes que usaron el pase
  accessLogs      AccessLog[] // Relación con registros de acceso
  
  @@index([code]) // Búsqueda rápida por código
  @@index([status]) // Filtrado por estado
  @@index([validFrom, validUntil]) // Búsqueda por rango de fechas
  @@index([preRegisterId]) // Relación con pre-registro
  
  @@schema("tenant")
}

// Nuevo modelo para Bitácora de Accesos
model AccessLog {
  id              Int       @id @default(autoincrement())
  action          AccessAction // Tipo de acción (entrada, salida, denegado)
  timestamp       DateTime  @default(now()) // Momento del registro
  location        String    // Punto de acceso (ej: "Entrada principal")
  notes           String?   // Notas adicionales
  registeredBy    Int       // ID del usuario que registró el acceso
  
  visitorId       Int?      // ID del visitante (si aplica)
  visitor         Visitor?  @relation(fields: [visitorId], references: [id])
  
  accessPassId    Int?      // ID del pase de acceso (si aplica)
  accessPass      AccessPass? @relation(fields: [accessPassId], references: [id])
  
  @@index([action]) // Filtrado por tipo de acción
  @@index([timestamp]) // Búsqueda por fecha/hora
  @@index([visitorId]) // Relación con visitante
  @@index([accessPassId]) // Relación con pase de acceso
  
  @@schema("tenant")
}
