// Esquema para gesti√≥n de seguridad y minutas digitales

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

enum LogType {
  GENERAL
  INCIDENT
  VISITOR
  MAINTENANCE
  PATROL
  HANDOVER
  EMERGENCY
  SYSTEM_CHECK
}

enum LogPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum LogStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  CLOSED
  CANCELLED
}

enum LogCategory {
  ACCESS_CONTROL
  VISITOR_MGMT
  INCIDENT
  MAINTENANCE
  SAFETY
  EMERGENCY
  PATROL
  SYSTEM_ALERT
  COMMUNICATION
  OTHER
}

enum ShiftStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  MISSED
  CANCELLED
}

enum PatrolStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  INTERRUPTED
  CANCELLED
}

enum AlertType {
  SECURITY_BREACH
  FIRE
  MEDICAL_EMERGENCY
  SYSTEM_FAILURE
  UNAUTHORIZED_ACCESS
  VANDALISM
  NOISE_COMPLAINT
  SUSPICIOUS_ACTIVITY
  EQUIPMENT_FAILURE
  OTHER
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  CANCELLED
}

model DigitalLog {
  id            Int          @id @default(autoincrement())
  complexId     Int
  shiftDate     DateTime     @default(now())
  shiftStart    DateTime
  shiftEnd      DateTime?
  guardOnDuty   Int
  relievedBy    Int?
  logType       LogType      @default(GENERAL)
  priority      LogPriority  @default(NORMAL)
  title         String       @db.VarChar(200)
  description   String       @db.Text
  location      String?      @db.VarChar(100)
  involvedPersons Json?
  attachments   Json?
  photos        Json?
  status        LogStatus    @default(OPEN)
  requiresFollowUp Boolean   @default(false)
  followUpDate  DateTime?
  category      LogCategory  @default(OTHER)
  subcategory   String?      @db.VarChar(100)
  incidentId    Int?
  visitorId     Int?
  unitId        Int?
  weatherConditions String?  @db.VarChar(100)
  temperature       Float?
  patrolChecks     Json?
  systemChecks     Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     Int
  updatedBy     Int?
  guardSignature String?     @db.Text
  supervisorReview Boolean   @default(false)
  reviewedBy    Int?
  reviewedAt    DateTime?
  reviewNotes   String?      @db.Text
  complex       ResidentialComplex @relation(fields: [complexId], references: [id], onDelete: Cascade)
  guard         User         @relation("GuardLogs", fields: [guardOnDuty], references: [id])
  reliever      User?        @relation("RelievedLogs", fields: [relievedBy], references: [id])
  creator       User         @relation("CreatedLogs", fields: [createdBy], references: [id])
  updater       User?        @relation("UpdatedLogs", fields: [updatedBy], references: [id])
  reviewer      User?        @relation("ReviewedLogs", fields: [reviewedBy], references: [id])
  patrolLog     PatrolLog?   @relation(fields: [patrolLogId], references: [id])
  patrolLogId   Int?

  @@index([complexId, shiftDate])
  @@index([guardOnDuty, shiftDate])
  @@index([status, requiresFollowUp])
  @@index([category, priority])
  @@map("digital_logs")
  @@schema("tenant")
}

model GuardShift {
  id            Int          @id @default(autoincrement())
  complexId     Int
  shiftDate     DateTime
  startTime     DateTime
  endTime       DateTime
  guardAssigned Int
  status        ShiftStatus  @default(SCHEDULEED)
  checkInTime   DateTime?
  checkOutTime  DateTime?
  notes         String?      @db.Text
  irregularities String?     @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     Int
  complex       ResidentialComplex @relation(fields: [complexId], references: [id])
  guard         User         @relation("AssignedShifts", fields: [guardAssigned], references: [id])
  creator       User         @relation("CreatedShifts", fields: [createdBy], references: [id])

  @@unique([guardAssigned, shiftDate, startTime])
  @@index([complexId, shiftDate])
  @@index([guardAssigned, status])
  @@map("guard_shifts")
  @@schema("tenant")
}

model SecurityCheckpoint {
  id          Int      @id @default(autoincrement())
  complexId   Int
  name        String   @db.VarChar(100)
  description String?  @db.Text
  location    String   @db.VarChar(100)
  latitude    Float?
  longitude   Float?
  qrCode      String?  @unique @db.VarChar(100)
  nfcTag      String?  @unique @db.VarChar(100)
  isActive    Boolean  @default(true)
  checkOrder  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])
  creator     User     @relation("CreatedCheckpoints", fields: [createdBy], references: [id])

  @@index([complexId, isActive])
  @@index([complexId, checkOrder])
  @@map("security_checkpoints")
  @@schema("tenant")
}

model PatrolLog {
  id           Int         @id @default(autoincrement())
  complexId    Int
  digitalLogId Int?
  patrolDate   DateTime    @default(now())
  guardId      Int
  startTime    DateTime
  endTime      DateTime?
  status       PatrolStatus @default(IN_PROGRESS)
  checkpoints  Json
  incidents    Json?
  notes        String?     @db.Text
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  complex      ResidentialComplex @relation(fields: [complexId], references: [id])
  guard        User        @relation("PatrolLogs", fields: [guardId], references: [id])
  digitalLog   DigitalLog? @relation(fields: [digitalLogId], references: [id])

  @@index([complexId, patrolDate])
  @@index([guardId, status])
  @@map("patrol_logs")
  @@schema("tenant")
}

model SecurityAlert {
  id          Int         @id @default(autoincrement())
  complexId   Int
  alertType   AlertType
  priority    AlertPriority @default(MEDIUM)
  title       String      @db.VarChar(200)
  description String      @db.Text
  location    String?     @db.VarChar(100)
  status      AlertStatus @default(ACTIVE)
  acknowledgedBy Int?
  acknowledgedAt DateTime?
  resolvedBy     Int?
  resolvedAt     DateTime?
  resolution     String?   @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])
  creator     User        @relation("CreatedAlerts", fields: [createdBy], references: [id])
  acknowledger User?      @relation("AcknowledgedAlerts", fields: [acknowledgedBy], references: [id])
  resolver    User?       @relation("ResolvedAlerts", fields: [resolvedBy], references: [id])

  @@index([complexId, status])
  @@index([alertType, priority])
  @@map("security_alerts")
  @@schema("tenant")
}
