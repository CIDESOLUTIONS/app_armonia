// Esquema Prisma principal para modelos globales

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  schemas    = ["public"] // Solo el esquema p√∫blico para modelos globales
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"] // Mantener multiSchema para compatibilidad
}

// Modelos globales
model ResidentialComplex {
  id          Int      @id @default(autoincrement())
  name        String
  schemaName  String   @unique
  totalUnits  Int
  adminEmail  String
  adminName   String
  adminPhone  String?
  address     String?
  city        String?
  state       String?
  country     String?  @default("Colombia")
  propertyTypes Json?
  planType    PlanType @default(BASIC)
  planStartDate DateTime @default(now())
  planEndDate   DateTime?
  trialEndDate  DateTime?
  isTrialActive Boolean  @default(true)
  maxUnits      Int      @default(30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  subscriptions Subscription[]
  listings    Listing[]

  @@schema("public")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  name                 String?
  password             String
  role                 String
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  complexId            Int?
  complex              ResidentialComplex?   @relation(fields: [complexId], references: [id])
  listings             Listing[]
  sentMessages         Message[]             @relation("sentMessages")
  receivedMessages     Message[]             @relation("receivedMessages")
  reports              Report[]
  loginHistory         LoginHistory[]
  passwordResetToken   String?               @unique
  passwordResetExpires DateTime?

  @@schema("public")
}

model Prospect {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  complexName String
  units       Int
  message     String?
  createdAt   DateTime @default(now())
  contacted   Boolean  @default(false)

  @@schema("public")
}

model Subscription {
  id          Int      @id @default(autoincrement())
  complexId   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])
  planType    PlanType
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  amount      Decimal  @db.Decimal(10,2)
  currency    String   @default("USD")
  billingEmail     String
  billingName      String
  billingAddress   String?
  billingCity      String?
  billingCountry   String? @default("Colombia")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  email     String?
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
  status    String
  reason    String?

  @@schema("public")
}

model Listing {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  images      String[]
  isSold      Boolean   @default(false)
  reports     Report[]
  messages    Message[]
  complexId   Int
  complex     ResidentialComplex @relation(fields: [complexId], references: [id])

  @@index([authorId])
  @@index([complexId])
  @@schema("public")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  sender    User     @relation("sentMessages", fields: [senderId], references: [id])
  senderId  Int
  receiver  User     @relation("receivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  listingId Int
  listing   Listing  @relation(fields: [listingId], references: [id])
  createdAt DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
  @@index([listingId])
  @@schema("public")
}

model Report {
  id        Int      @id @default(autoincrement())
  reason    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  reporter  User     @relation(fields: [reporterId], references: [id])
  reporterId Int
  createdAt DateTime @default(now())

  @@index([listingId])
  @@index([reporterId])
  @@schema("public")
}

// Enumeraciones globales
enum PlanType {
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE

  @@schema("public")
}

enum DocumentType {
  CC
  CE
  PASSPORT
  OTHER

  @@schema("public")
}

enum VisitorStatus {
  ACTIVE
  DEPARTED

  @@schema("public")
}

enum AccessPassType {
  SINGLE_USE
  TEMPORARY
  RECURRENT

  @@schema("public")
}

enum AccessPassStatus {
  ACTIVE
  USED
  EXPIRED
  REVOKED

  @@schema("public")
}

enum AccessAction {
  ENTRY
  EXIT
  DENIED

  @@schema("public")
}

enum PackageType {
  PACKAGE
  MAIL
  DOCUMENT
  FOOD
  OTHER

  @@schema("public")
}

enum PackageStatus {
  RECEIVED
  NOTIFIED
  PENDING
  DELIVERED
  RETURNED
  EXPIRED

  @@schema("public")
}

enum PackagePriority {
  LOW
  NORMAL
  HIGH
  URGENT

  @@schema("public")
}

enum IncidentCategory {
  SECURITY
  MAINTENANCE
  EMERGENCY
  NOISE
  PARKING
  COMMON_AREAS
  NEIGHBOR
  SERVICES
  PETS
  OTHER

  @@schema("public")
}

enum IncidentPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("public")
}

enum IncidentStatus {
  REPORTED
  ASSIGNED
  IN_PROGRESS
  ON_HOLD
  RESOLVED
  CLOSED
  CANCELLED
  REOPENED

  @@schema("public")
}

enum GlobalNotificationType {
  EMAIL
  SMS
  PUSH
  APP
  WHATSAPP

  @@schema("public")
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER

  @@schema("public")
}