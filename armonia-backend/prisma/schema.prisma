generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

// ========== ENUMS =============================

enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  TRIAL
  EXPIRED
  PENDING
}

enum LicenseStatus {
  ACTIVE
  REVOKED
  EXPIRED
  PENDING
}

enum UsageLimitType {
  USERS
  PROPERTIES
  DOCUMENTS
  STORAGE
  API_CALLS
}

enum ResetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  RESIDENT
  GUARD
  STAFF
}

enum PropertyType {
  APARTMENT
  HOUSE
  OFFICE
  COMMERCIAL
}

enum DocumentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AccessLevel {
  VIEW
  EDIT
  DOWNLOAD
  COMMENT
}

enum AssemblyType {
  ORDINARY
  EXTRAORDINARY
}

enum AssemblyStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BudgetStatus {
  DRAFT
  APPROVED
  REJECTED
}

enum CommunicationType {
  ANNOUNCEMENT
  MESSAGE
  PQR_RESPONSE
}

enum EventType {
  GENERAL
  EMERGENCY
  IMPORTANT
  COMMUNITY
}

enum Visibility {
  PUBLIC
  ROLE_BASED
  PRIVATE
}

enum ConversationType {
  DIRECT
  GROUP
}

enum FeeType {
  ADMINISTRATION
  LATE_FEE
  SPECIAL_ASSESSMENT
  AMENITY
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PackageStatus {
  IN_RECEPTION
  DELIVERED
  RETURNED
}

enum PanicAlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PSE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PQRType {
  PETITION
  COMPLAINT
  CLAIM
  SUGGESTION
}

enum PQRStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectTaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  OPEN_TEXT
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

enum SecurityEventType {
  THEFT
  VANDALISM
  SUSPICIOUS_ACTIVITY
  ACCESS_VIOLATION
}

enum TransactionType {
  PAYMENT
  REFUND
  CHARGEBACK
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethodProvider {
  STRIPE
  PAYPAL
  PSE
  MERCADOPAGO
}

enum RefundReason {
  REQUESTED_BY_CUSTOMER
  DUPLICATE
  FRAUDULENT
  OTHER
}

enum RefundStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
  FATAL
}

enum DocumentType {
  REGULATION
  MINUTES
  MANUAL
  CONTRACT
  INVOICE
  REPORT
  CERTIFICATE
  BUDGET
  OTHER
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ========== PLAN & LICENSING MODELS ==========

model Plan {
  id                   String               @id @default(cuid())
  name                 String
  description          String?
  type                 PlanType
  price                Decimal
  billingCycle         BillingCycle
  features             Json?
  featureConfiguration Json?
  usageLimits          Json?
  isPublic             Boolean              @default(true)
  isActive             Boolean              @default(true)
  trialDays            Int?                 @default(0)
  setupFee             Decimal?             @default(0)
  metadata             Json?
  allowedRoles         UserRole[]
  subscriptions        Subscription[]
  residentialComplexes ResidentialComplex[] @relation("PlanToComplex")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  @@index([type])
  @@index([isActive])
}

model Subscription {
  id                   String                   @id @default(cuid())
  planId               String
  plan                 Plan                     @relation(fields: [planId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex       @relation(fields: [residentialComplexId], references: [id])
  status               SubscriptionStatus
  billingCycle         BillingCycle
  quantity             Int                      @default(1)
  currentPrice         Decimal
  startDate            DateTime
  endDate              DateTime?
  nextBillingDate      DateTime?
  autoRenew            Boolean                  @default(true)
  paymentMethodId      String?
  licenses             License[]
  usageLimits          SubscriptionUsageLimit[]
  metadata             Json?
  usageTracking        UsageTracking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([residentialComplexId])
  @@index([status])
  @@index([planId])
}

model License {
  id             String        @id @default(cuid())
  subscriptionId String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  status         LicenseStatus
  assignedRoles  UserRole[]
  permissions    Json?
  activatedAt    DateTime?
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
}

model SubscriptionUsageLimit {
  id             String         @id @default(cuid())
  subscriptionId String
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id])
  limitType      UsageLimitType
  limitValue     Decimal
  currentUsage   Decimal        @default(0)
  resetPeriod    ResetPeriod
  resetDate      DateTime
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([subscriptionId, limitType])
  @@index([limitType])
}

model UsageTracking {
  id             String         @id @default(cuid())
  subscriptionId String
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id])
  limitType      UsageLimitType
  amount         Decimal
  description    String?
  metadata       Json?
  createdAt      DateTime       @default(now())

  @@index([subscriptionId, limitType])
  @@index([createdAt])
}

// Base Models - Ordered to minimize forward references
model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String?
  password                  String
  role                      UserRole
  residentialComplexId      String?
  residentialComplex        ResidentialComplex?        @relation(fields: [residentialComplexId], references: [id])
  ownedProperties           Property[]                 @relation("Owner")
  residentOf                Property[]                 @relation("Resident")
  reservations              Reservation[]
  pqrs                      PQR[]
  incidents                 Incident[]
  packages                  Package[]
  panicAlerts               PanicAlert[]
  listings                  Listing[]
  reportedListings          ReportedListing[]
  reviews                   Review[]
  assemblyAttendance        AssemblyAttendance[]
  payments                  Payment[]
  microCreditApplications   MicroCreditApplication[]
  personalFinances          PersonalFinance[]
  sentCommunications        Communication[]            @relation("SentCommunications")
  receivedCommunications    Communication[]            @relation("ReceivedCommunications")
  messagesSent              Message[]                  @relation("Sender")
  messagesReceived          Message[]                  @relation("Recipient")
  reportsGenerated          Report[]
  pets                      Pet[]
  vehicles                  Vehicle[]
  assemblyVoteRecords       AssemblyVoteRecord[]
  votes                     Vote[]
  announcementReads         AnnouncementRead[]
  eventAttendees            EventAttendee[]
  notifications             Notification[]             @relation("RecipientNotifications")
  notificationConfirmations NotificationConfirmation[]
  reservationNotifications  ReservationNotification[]
  createdAnnouncements      Announcement[]
  organizedEvents           CommunityEvent[]
  phoneNumber               String?
  deviceToken               String?
  conversationParticipants  ConversationParticipant[]
  messageReads              MessageRead[]
  approvedBudgets           Budget[]
  approvedExpenses          Expense[]
  ResolvedPanicAlerts       PanicAlert[]               @relation("ResolvedPanicAlerts")
  assignedTasks             ProjectTask[]              @relation("AssignedTasks")
  projectUpdates            ProjectUpdate[]            @relation("ProjectUpdates")
  createdProjects           Project[]                  @relation("CreatedProjects")
  administeredComplexes     ResidentialComplex[]       @relation("AdministeredComplexes")
  reportedSecurityEvents    SecurityEvent[]            @relation("ReportedSecurityEvents")
  userAccessAttempts        AccessAttempt[]            @relation("UserAccessAttempts")
  uploadedDocuments         Document[]                 @relation("UploadedDocuments")
  updatedDocuments          Document[]                 @relation("UpdatedDocuments")
  approvedDocuments         Document[]                 @relation("ApprovedDocuments")
  sharedDocuments           DocumentShare[]            @relation("SharedDocuments")
  receivedDocuments         DocumentShare[]            @relation("ReceivedDocuments")
  documentComments          DocumentComment[]          @relation("DocumentComments")
  documentActivities        DocumentActivity[]         @relation("DocumentActivities")
  acknowledgedAlerts        IoTAlert[]                 @relation("AcknowledgedAlerts")
  resolvedAlerts            IoTAlert[]                 @relation("ResolvedAlerts")
  paymentMethods            PaymentMethod[]
  paymentNotifications      PaymentNotification[]      @relation("UserToPaymentNotification")
  licenses                  License[]
  logEvents                 LogEvent[]
  bankReconciliations       BankReconciliation[]       @relation("ProcessedReconciliations")
  biometricData             String?
  biometricEnabled          Boolean                    @default(false)

  @@index([residentialComplexId])
  @@index([role])
}

model ResidentialComplex {
  id                   String                 @id @default(cuid())
  name                 String
  address              String
  city                 String
  country              String
  planId               String
  plan                 Plan                   @relation("PlanToComplex", fields: [planId], references: [id])
  users                User[]
  properties           Property[]
  amenities            Amenity[]
  pets                 Pet[]
  vehicles             Vehicle[]
  parkings             Parking[]
  assemblies           Assembly[]
  budgets              Budget[]
  cameras              Camera[]
  documents            Document[]
  iotDevices           IoTDevice[]
  listings             Listing[]
  packages             Package[]
  panicAlerts          PanicAlert[]
  pqrs                 PQR[]
  projects             Project[]
  reports              Report[]
  serviceProviders     ServiceProvider[]
  surveys              Survey[]
  visitors             Visitor[]
  incidents            Incident[]
  utilityRates         UtilityRate[]
  announcements        Announcement[]
  communityEvents      CommunityEvent[]
  expenses             Expense[]
  status               String?
  adminId              String?
  admin                User?                  @relation("AdministeredComplexes", fields: [adminId], references: [id])
  contactEmail         String?
  contactPhone         String?
  logoUrl              String?
  primaryColor         String?
  secondaryColor       String?
  isActive             Boolean                @default(true)
  securityEvents       SecurityEvent[]
  accessAttempts       AccessAttempt[]
  bankReconciliations  BankReconciliation[]
  telemetryData        TelemetryData[]
  iotAlerts            IoTAlert[]
  deviceConfigs        DeviceConfig[]
  utilityBills         UtilityBill[]
  smartMeterReadings   SmartMeterReading[]
  utilityReadings      UtilityReading[]
  consumptionAnalytics ConsumptionAnalytics[]
  paymentGateways      PaymentGatewayConfig[]
  metricDataPoints     MetricDataPoint[]
  monitoringAlerts     MonitoringAlert[]
  logEvents            LogEvent[]
  subscriptions        Subscription[]

  @@index([planId])
  @@index([adminId])
}

model Property {
  id                   String                 @id @default(cuid())
  type                 PropertyType
  number               String
  ownerId              String
  owner                User                   @relation("Owner", fields: [ownerId], references: [id])
  residentId           String?
  resident             User?                  @relation("Resident", fields: [residentId], references: [id])
  fees                 Fee[]
  intercoms            Intercom[]
  parkings             Parking[]
  residentialComplexId String
  residentialComplex   ResidentialComplex     @relation(fields: [residentialComplexId], references: [id])
  visitors             Visitor[]
  status               String?
  iotDevices           IoTDevice[]
  smartMeterReadings   SmartMeterReading[]
  utilityBills         UtilityBill[]
  utilityReadings      UtilityReading[]
  consumptionAnalytics ConsumptionAnalytics[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([ownerId])
  @@index([residentId])
  @@index([residentialComplexId])
}

model Document {
  id                   String             @id @default(cuid())
  name                 String
  originalName         String
  description          String?
  url                  String
  fileName             String
  filePath             String?
  fileSize             Int
  mimeType             String
  checksum             String?
  type                 DocumentType
  category             String?
  subcategory          String?
  tags                 String[]
  accessLevel          AccessLevel
  accessRoles          UserRole[]
  isPublic             Boolean
  version              Int
  isCurrentVersion     Boolean
  parentDocumentId     String?
  parentDocument       Document?          @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  status               DocumentStatus
  requiresApproval     Boolean
  approvalStatus       String?
  approvedAt           DateTime?
  approvedById         String?
  approvedBy           User?              @relation("ApprovedDocuments", fields: [approvedById], references: [id])
  expirationDate       DateTime?
  priority             Priority?
  language             String?
  downloadCount        Int
  viewCount            Int
  lastAccessedAt       DateTime?
  uploadedById         String
  uploadedBy           User               @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  updatedById          String?
  updatedBy            User?              @relation("UpdatedDocuments", fields: [updatedById], references: [id])
  versions             Document[]         @relation("DocumentVersions")
  comments             DocumentComment[]
  shares               DocumentShare[]
  activities           DocumentActivity[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([residentialComplexId, type])
  @@index([residentialComplexId, category])
  @@index([status])
  @@index([uploadedById])
  @@index([approvedById])
}

model Amenity {
  id                   String             @id @default(cuid())
  name                 String
  description          String?
  rules                String?
  type                 String?
  reservations         Reservation[]
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([residentialComplexId])
}

model Announcement {
  id                   String                   @id @default(cuid())
  title                String
  content              String
  type                 EventType
  visibility           Visibility
  targetRoles          UserRole[]
  requireConfirmation  Boolean
  expiresAt            DateTime?
  createdById          String
  createdBy            User                     @relation(fields: [createdById], references: [id])
  attachments          AnnouncementAttachment[]
  readBy               AnnouncementRead[]
  residentialComplexId String
  residentialComplex   ResidentialComplex       @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt

  @@index([createdById])
  @@index([residentialComplexId])
}

model AnnouncementAttachment {
  id             String       @id @default(cuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  name           String
  url            String
  type           String
  size           Int

  @@index([announcementId])
}

model AnnouncementRead {
  announcementId String
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt         DateTime     @default(now())

  @@id([announcementId, userId])
}

model Assembly {
  id                   String               @id @default(cuid())
  title                String
  description          String?
  date                 DateTime
  type                 AssemblyType
  status               AssemblyStatus
  quorum               Decimal
  attendance           AssemblyAttendance[]
  votes                AssemblyVote[]
  minutes              AssemblyMinutes[]
  residentialComplexId String
  residentialComplex   ResidentialComplex   @relation(fields: [residentialComplexId], references: [id])

  @@index([residentialComplexId])
  @@index([date])
  @@index([status])
}

model AssemblyMinutes {
  id         String   @id @default(cuid())
  assemblyId String
  assembly   Assembly @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([assemblyId])
}

model AssemblyAttendance {
  id            String    @id @default(cuid())
  assemblyId    String
  assembly      Assembly  @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  attended      Boolean   @default(false)
  attendedAt    DateTime?
  unitId        String
  checkInTime   DateTime?
  notes         String?
  proxyName     String?
  proxyDocument String?
  isDelegate    Boolean
  isOwner       Boolean

  @@unique([assemblyId, userId])
}

model Budget {
  id                   String             @id @default(cuid())
  title                String
  month                Int
  status               BudgetStatus
  year                 Int
  totalAmount          Decimal
  items                BudgetItem[]
  expenses             Expense[]
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  approvedById         String?
  approvedBy           User?              @relation(fields: [approvedById], references: [id])
  approvedAt           DateTime?

  @@index([residentialComplexId])
  @@index([year, month])
}

model BudgetItem {
  id          String  @id @default(cuid())
  budgetId    String
  budget      Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  name        String
  amount      Decimal
  description String?

  @@index([budgetId])
}

model Camera {
  id                   String             @id @default(cuid())
  name                 String
  url                  String
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])

  @@index([residentialComplexId])
}

model Communication {
  id          String            @id @default(cuid())
  title       String
  content     String
  type        CommunicationType
  senderId    String
  sender      User              @relation("SentCommunications", fields: [senderId], references: [id])
  recipientId String?
  recipient   User?             @relation("ReceivedCommunications", fields: [recipientId], references: [id])
  read        Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([senderId])
  @@index([recipientId])
}

model CommunityEvent {
  id                   String             @id @default(cuid())
  title                String
  description          String?
  location             String?
  startDateTime        DateTime
  endDateTime          DateTime
  type                 EventType
  visibility           Visibility
  targetRoles          UserRole[]
  maxAttendees         Int?
  organizerId          String
  organizer            User               @relation(fields: [organizerId], references: [id])
  attachments          EventAttachment[]
  attendees            EventAttendee[]
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([residentialComplexId])
  @@index([organizerId])
}

model EventAttachment {
  id      String         @id @default(cuid())
  eventId String
  event   CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name    String
  url     String
  type    String
  size    Int

  @@index([eventId])
}

model EventAttendee {
  eventId      String
  userId       String
  event        CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status       String
  registeredAt DateTime       @default(now())

  @@id([eventId, userId])
}

model Conversation {
  id           String                    @id @default(cuid())
  type         ConversationType
  participants ConversationParticipant[]
  messages     Message[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model ConversationParticipant {
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  joinedAt       DateTime     @default(now())

  @@id([conversationId, userId])
}

model DemoRequest {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  complexName String
  message     String?
  createdAt   DateTime @default(now())
}

model Expense {
  id                   String             @id @default(cuid())
  description          String
  amount               Decimal
  category             String
  expenseDate          DateTime
  vendor               String?
  invoiceNumber        String?
  notes                String?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  budgetId             String?
  budget               Budget?            @relation(fields: [budgetId], references: [id])
  approvedById         String?
  approvedBy           User?              @relation(fields: [approvedById], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([residentialComplexId])
  @@index([budgetId])
  @@index([approvedById])
}

model Fee {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        FeeType
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  amount      Decimal
  dueDate     DateTime
  paid        Boolean   @default(false)
  paidAt      DateTime?
  paymentId   String?
  payment     Payment?  @relation(fields: [paymentId], references: [id])
  isRecurring Boolean   @default(false)
  frequency   String?
  createdAt   DateTime  @default(now())

  @@index([propertyId])
  @@index([paymentId])
  @@index([type])
  @@index([paid])
}

model Incident {
  id                   String             @id @default(cuid())
  title                String
  description          String
  status               IncidentStatus
  reportedById         String
  reportedBy           User               @relation(fields: [reportedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([reportedById])
  @@index([residentialComplexId])
  @@index([status])
}

model Intercom {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  number     String

  @@unique([propertyId, number])
}

model Listing {
  id                   String             @id @default(cuid())
  title                String
  description          String
  price                Decimal
  sellerId             String
  seller               User               @relation(fields: [sellerId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  reportedListings     ReportedListing[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([sellerId])
  @@index([residentialComplexId])
}

model Message {
  id             String              @id @default(cuid())
  conversationId String
  conversation   Conversation        @relation(fields: [conversationId], references: [id])
  content        String
  senderId       String
  sender         User                @relation("Sender", fields: [senderId], references: [id])
  recipientId    String
  recipient      User?               @relation("Recipient", fields: [recipientId], references: [id])
  status         MessageStatus
  attachments    MessageAttachment[]
  readBy         MessageRead[]
  createdAt      DateTime            @default(now())

  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
}

model MessageAttachment {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  name      String
  url       String
  type      String
  size      Int

  @@index([messageId])
}

model MessageRead {
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())

  @@id([messageId, userId])
}

model MicroCreditApplication {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  amount    Decimal
  status    ApplicationStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([userId])
  @@index([status])
}

model Notification {
  id                  String                     @id @default(cuid())
  recipientId         String
  recipient           User                       @relation("RecipientNotifications", fields: [recipientId], references: [id])
  type                NotificationType
  title               String
  message             String
  link                String?
  data                Json?
  sourceType          String
  sourceId            String?
  priority            NotificationPriority
  read                Boolean                    @default(false)
  readAt              DateTime?
  requireConfirmation Boolean                    @default(false)
  expiresAt           DateTime?
  confirmations       NotificationConfirmation[]
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt

  @@index([recipientId])
  @@index([read])
}

model NotificationConfirmation {
  id             String       @id @default(cuid())
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  confirmedAt    DateTime     @default(now())

  @@unique([notificationId, userId])
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  Vote       Vote[]

  @@index([questionId])
}

model Package {
  id                   String             @id @default(cuid())
  residentId           String
  resident             User               @relation(fields: [residentId], references: [id])
  receivedAt           DateTime           @default(now())
  deliveredAt          DateTime?
  notes                String?
  status               PackageStatus      @default(IN_RECEPTION)
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])

  @@index([residentId])
  @@index([residentialComplexId])
  @@index([status])
}

model PanicAlert {
  id                   String             @id @default(cuid())
  userId               String
  user                 User               @relation(fields: [userId], references: [id])
  location             String?
  description          String?
  status               PanicAlertStatus   @default(ACTIVE)
  resolvedTime         DateTime?
  resolvedById         String?
  resolvedBy           User?              @relation("ResolvedPanicAlerts", fields: [resolvedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())

  @@index([userId])
  @@index([residentialComplexId])
  @@index([status])
}

model Parking {
  id                   String             @id @default(cuid())
  number               String
  propertyId           String?
  property             Property?          @relation(fields: [propertyId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  type                 String?
  status               String?
  notes                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([propertyId])
  @@index([residentialComplexId])
}

model PaymentAttempt {
  id        String        @id @default(cuid())
  paymentId String
  payment   Payment       @relation(fields: [paymentId], references: [id])
  status    PaymentStatus
  gateway   String
  gatewayId String?
  createdAt DateTime      @default(now())

  @@index([paymentId])
}

model Payment {
  id                   String                @id @default(cuid())
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  amount               Decimal
  date                 DateTime
  method               PaymentMethodType
  status               PaymentStatus
  transactionId        String?               @unique
  paymentMethodId      String?
  fees                 Fee[]
  attempts             PaymentAttempt[]
  bankReconciliations  BankReconciliation[]
  paymentMethod        PaymentMethod?        @relation("PaymentMethodToPayment", fields: [paymentMethodId], references: [id])
  transactions         Transaction[]         @relation("PaymentToTransaction")
  webhookEvents        WebhookEvent[]        @relation("PaymentToWebhookEvent")
  refunds              PaymentRefund[]       @relation("PaymentToPaymentRefund")
  paymentNotifications PaymentNotification[] @relation("PaymentToPaymentNotification")

  @@index([userId])
  @@index([status])
  @@index([paymentMethodId])
}

model PaymentGatewayConfig {
  id                   String             @id @default(cuid())
  name                 String
  type                 String
  apiKey               String
  secretKey            String
  supportedCurrencies  String[]
  isActive             Boolean            @default(true)
  testMode             Boolean            @default(true)
  webhookUrl           String?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  transactions         Transaction[]      @relation("PaymentGatewayToTransaction")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([residentialComplexId])
}

model PersonalFinance {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  category  String
  source    String?
  amount    Decimal
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Pet {
  id                   String             @id @default(cuid())
  name                 String
  breed                String?
  ownerId              String
  owner                User               @relation(fields: [ownerId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  type                 String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([ownerId])
  @@index([residentialComplexId])
}

model PQR {
  id                   String             @id @default(cuid())
  title                String
  description          String
  type                 PQRType
  status               PQRStatus
  reportedById         String
  reportedBy           User               @relation(fields: [reportedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([reportedById])
  @@index([residentialComplexId])
  @@index([status])
  @@index([type])
}

model Project {
  id                   String             @id @default(cuid())
  name                 String
  description          String?
  status               ProjectStatus
  startDate            DateTime?
  endDate              DateTime?
  budget               Decimal?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdById          String
  createdBy            User               @relation("CreatedProjects", fields: [createdById], references: [id])
  tasks                ProjectTask[]
  updates              ProjectUpdate[]

  @@index([residentialComplexId])
  @@index([status])
  @@index([createdById])
}

model ProjectTask {
  id           String            @id @default(cuid())
  projectId    String
  project      Project           @relation(fields: [projectId], references: [id])
  title        String
  description  String?
  status       ProjectTaskStatus
  assignedToId String?
  assignedTo   User?             @relation("AssignedTasks", fields: [assignedToId], references: [id])
  dueDate      DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([projectId])
  @@index([status])
  @@index([assignedToId])
}

model ProjectUpdate {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  title       String
  description String?
  progress    Decimal
  authorId    String
  author      User     @relation("ProjectUpdates", fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
  @@index([authorId])
}

model Question {
  id       String       @id @default(cuid())
  surveyId String
  survey   Survey       @relation(fields: [surveyId], references: [id])
  text     String
  type     QuestionType
  options  Option[]
  votes    Vote[]

  @@index([surveyId])
}

model Report {
  id                   String             @id @default(cuid())
  name                 String
  data                 Json
  generatedById        String
  generatedBy          User               @relation(fields: [generatedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())

  @@index([generatedById])
  @@index([residentialComplexId])
}

model ReportedListing {
  id           String   @id @default(cuid())
  listingId    String
  listing      Listing  @relation(fields: [listingId], references: [id])
  reportedById String
  reportedBy   User     @relation(fields: [reportedById], references: [id])
  reason       String
  createdAt    DateTime @default(now())

  @@index([listingId])
  @@index([reportedById])
}

model Reservation {
  id                       String                    @id @default(cuid())
  amenityId                String
  amenity                  Amenity                   @relation(fields: [amenityId], references: [id])
  userId                   String
  user                     User                      @relation(fields: [userId], references: [id])
  startTime                DateTime
  endTime                  DateTime
  status                   ReservationStatus
  reservationNotifications ReservationNotification[]
  title                    String?
  description              String?
  attendees                String[]
  requiresPayment          Boolean?
  paymentAmount            Decimal?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  @@index([amenityId])
  @@index([userId])
  @@index([status])
}

model ReservationNotification {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  type          String
  message       String
  isRead        Boolean      @default(false)
  readAt        DateTime?
  migrated      Boolean      @default(false)
  createdAt     DateTime     @default(now())

  @@index([userId])
  @@index([reservationId])
}

model Review {
  id                String          @id @default(cuid())
  rating            Int
  comment           String?
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  createdAt         DateTime        @default(now())

  @@index([serviceProviderId])
  @@index([userId])
}

model SecurityEvent {
  id                   String             @id @default(cuid())
  type                 SecurityEventType
  description          String
  location             String?
  reportedByUserId     String?
  reportedBy           User?              @relation("ReportedSecurityEvents", fields: [reportedByUserId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([residentialComplexId])
  @@index([type])
}

model AccessAttempt {
  id                   String             @id @default(cuid())
  ipAddress            String
  username             String
  isSuccess            Boolean
  reason               String?
  userId               String?
  user                 User?              @relation("UserAccessAttempts", fields: [userId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([userId])
  @@index([residentialComplexId])
}

model ServiceProvider {
  id                   String             @id @default(cuid())
  name                 String
  service              String
  phone                String?
  email                String?
  reviews              Review[]
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])

  @@index([residentialComplexId])
}

model SmartMeterReading {
  id                   String             @id @default(cuid())
  deviceId             String
  device               IoTDevice          @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  propertyId           String?
  property             Property?          @relation(fields: [propertyId], references: [id])
  reading              Decimal
  previousReading      Decimal?
  unit                 String
  consumption          Decimal?
  cost                 Decimal?
  timestamp            DateTime
  isAutomatic          Boolean            @default(true)
  source               String             @default("telemetry")
  additionalData       Json?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  utilityBills         UtilityBill[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([deviceId, timestamp])
  @@index([propertyId])
  @@index([residentialComplexId, timestamp])
}

model Survey {
  id                   String             @id @default(cuid())
  title                String
  description          String?
  questions            Question[]
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])

  @@index([residentialComplexId])
}

model Vehicle {
  id                   String             @id @default(cuid())
  plate                String             @unique
  brand                String?
  model                String?
  ownerId              String
  owner                User               @relation(fields: [ownerId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([ownerId])
  @@index([residentialComplexId])
}

model Visitor {
  id                   String             @id @default(cuid())
  name                 String
  idNumber             String?
  entryTime            DateTime
  exitTime             DateTime?
  propertyId           String
  property             Property           @relation(fields: [propertyId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])

  @@index([propertyId])
  @@index([residentialComplexId])
}

model Vote {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  optionId   String
  option     Option   @relation(fields: [optionId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([questionId, userId])
}

model AssemblyVote {
  id         String               @id @default(cuid())
  assemblyId String
  assembly   Assembly             @relation(fields: [assemblyId], references: [id])
  question   String
  options    String[]
  votes      AssemblyVoteRecord[]

  @@index([assemblyId])
}

model AssemblyVoteRecord {
  id             String       @id @default(cuid())
  assemblyVoteId String
  assemblyVote   AssemblyVote @relation(fields: [assemblyVoteId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  option         String
  coefficient    Decimal?
  createdAt      DateTime     @default(now())

  @@unique([assemblyVoteId, userId])
}

model BankReconciliation {
  id                   String             @id @default(cuid())
  transactionId        String             @unique
  date                 DateTime
  description          String
  amount               Decimal
  type                 String
  reference            String?
  account              String?
  bankName             String?
  accountNumber        String?
  status               String
  paymentId            String?
  payment              Payment?           @relation(fields: [paymentId], references: [id])
  confidence           Decimal?
  reason               String?
  suggestions          Json?
  notes                String?
  processedById        String?
  processedBy          User?              @relation("ProcessedReconciliations", fields: [processedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  processedAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([paymentId])
  @@index([processedById])
  @@index([residentialComplexId])
}

model Transaction {
  id                   String                @id @default(cuid())
  paymentId            String
  payment              Payment               @relation("PaymentToTransaction", fields: [paymentId], references: [id])
  paymentGatewayId     String
  paymentGateway       PaymentGatewayConfig? @relation("PaymentGatewayToTransaction", fields: [paymentGatewayId], references: [id])
  amount               Decimal
  currency             String
  type                 TransactionType
  status               TransactionStatus
  gatewayTransactionId String?
  gatewayReference     String?
  gatewayResponse      Json?
  processingFee        Decimal?
  netAmount            Decimal?
  description          String?
  metadata             Json?
  ipAddress            String?
  userAgent            String?
  webhookVerified      Boolean               @default(false)
  reconciled           Boolean               @default(false)
  reconciledAt         DateTime?
  completedAt          DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@index([paymentGatewayId])
  @@index([status])
  @@index([createdAt])
}

model PaymentMethod {
  id              String                @id @default(cuid())
  userId          String
  user            User                  @relation(fields: [userId], references: [id])
  type            PaymentMethodType
  provider        PaymentMethodProvider
  gatewayMethodId String?
  isDefault       Boolean               @default(false)
  isActive        Boolean               @default(true)
  last4           String?
  brand           String?
  expiryMonth     Int?
  expiryYear      Int?
  bankName        String?
  bankCode        String?
  accountType     String?
  paypalEmail     String?
  name            String?
  metadata        Json?
  payments        Payment[]             @relation("PaymentMethodToPayment")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([userId])
  @@index([type])
}

model WebhookEvent {
  id           String    @id @default(cuid())
  provider     String
  eventType    String
  eventId      String
  paymentId    String?
  payment      Payment?  @relation("PaymentToWebhookEvent", fields: [paymentId], references: [id])
  processed    Boolean   @default(false)
  processedAt  DateTime?
  retryCount   Int       @default(0)
  maxRetries   Int       @default(3)
  rawPayload   Json
  signature    String?
  verified     Boolean   @default(false)
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([provider, eventId])
  @@index([processed])
  @@index([eventType])
}

model PaymentRefund {
  id              String       @id @default(cuid())
  paymentId       String
  payment         Payment      @relation("PaymentToPaymentRefund", fields: [paymentId], references: [id])
  amount          Decimal
  currency        String
  reason          RefundReason
  status          RefundStatus
  gatewayRefundId String?
  gatewayResponse Json?
  processedBy     String?
  notes           String?
  metadata        Json?
  processedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([paymentId])
  @@index([status])
}

model PaymentNotification {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation("UserToPaymentNotification", fields: [userId], references: [id])
  paymentId    String?
  payment      Payment?  @relation("PaymentToPaymentNotification", fields: [paymentId], references: [id])
  type         String
  title        String
  message      String
  isRead       Boolean   @default(false)
  readAt       DateTime?
  sentViaEmail Boolean   @default(false)
  sentViaSMS   Boolean   @default(false)
  sentViaApp   Boolean   @default(true)
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([isRead])
}

model MetricDataPoint {
  id                   String             @id @default(cuid())
  metricName           String
  type                 String
  value                Decimal
  tags                 Json?
  metadata             Json?
  timestamp            DateTime           @default(now())
  source               String?
  unit                 String?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())

  @@index([metricName, timestamp])
  @@index([residentialComplexId, type])
}

model MonitoringAlert {
  id                   String             @id @default(cuid())
  name                 String
  description          String?
  metricName           String
  thresholdType        String
  thresholdValue       Decimal
  thresholdValue2      Decimal?
  isActive             Boolean            @default(true)
  notificationChannel  String?
  recipients           Json?
  cooldownPeriod       Int                @default(15)
  lastTriggered        DateTime?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([metricName])
  @@index([isActive])
}

model LogEvent {
  id                   String             @id @default(cuid())
  level                LogLevel
  message              String
  category             String?
  userId               String?
  user                 User?              @relation(fields: [userId], references: [id])
  sessionId            String?
  context              Json?
  metadata             Json?
  stackTrace           String?
  source               String?
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
  timestamp            DateTime           @default(now())
  createdAt            DateTime           @default(now())

  @@index([level, timestamp])
  @@index([category])
  @@index([userId])
}

model DocumentShare {
  id          String      @id @default(cuid())
  documentId  String
  document    Document    @relation(fields: [documentId], references: [id])
  sharedById  String
  sharedBy    User        @relation("SharedDocuments", fields: [sharedById], references: [id])
  recipientId String
  recipient   User        @relation("ReceivedDocuments", fields: [recipientId], references: [id])
  accessLevel AccessLevel
  shareToken  String?     @unique
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([documentId])
  @@index([recipientId])
}

model DocumentComment {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  userId     String
  user       User     @relation("DocumentComments", fields: [userId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([documentId])
  @@index([userId])
}

model DocumentActivity {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  userId     String
  user       User     @relation("DocumentActivities", fields: [userId], references: [id])
  activity   String
  details    Json?
  createdAt  DateTime @default(now())

  @@index([documentId])
  @@index([userId])
}

// Dummy models for IoT relations, to be defined
model IoTDevice {
  id                   String              @id @default(cuid())
  propertyId           String?
  property             Property?           @relation(fields: [propertyId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex  @relation(fields: [residentialComplexId], references: [id])
  smartMeterReadings   SmartMeterReading[]
}

model IoTAlert {
  id                   String             @id @default(cuid())
  acknowledgedById     String?
  acknowledgedBy       User?              @relation("AcknowledgedAlerts", fields: [acknowledgedById], references: [id])
  resolvedById         String?
  resolvedBy           User?              @relation("ResolvedAlerts", fields: [resolvedById], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}

model TelemetryData {
  id                   String             @id @default(cuid())
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}

model DeviceConfig {
  id                   String             @id @default(cuid())
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}

model UtilityBill {
  id                   String             @id @default(cuid())
  propertyId           String?
  property             Property?          @relation(fields: [propertyId], references: [id])
  smartMeterReadingId  String?
  smartMeterReading    SmartMeterReading? @relation(fields: [smartMeterReadingId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}

model UtilityReading {
  id                   String             @id @default(cuid())
  propertyId           String?
  property             Property?          @relation(fields: [propertyId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}

model ConsumptionAnalytics {
  id                   String             @id @default(cuid())
  propertyId           String?
  property             Property?          @relation(fields: [propertyId], references: [id])
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}

model UtilityRate {
  id                   String             @id @default(cuid())
  residentialComplexId String
  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id])
}