// Modelos para el sistema de votaciones en tiempo real

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model AssemblyUpdate {
  id              Int         @id @default(autoincrement())
  assemblyId      Int
  assembly        Assembly    @relation(fields: [assemblyId], references: [id])
  content         String
  authorId        Int
  authorName      String
  timestamp       DateTime    @default(now())
  type            String
  
  @@index([assemblyId])
  @@index([timestamp])
  @@schema("tenant")
}

model AgendaItemUpdate {
  id              Int         @id @default(autoincrement())
  agendaItemId    Int
  agendaItem      AgendaItem  @relation(fields: [agendaItemId], references: [id])
  content         String
  authorId        Int
  authorName      String
  timestamp       DateTime    @default(now())
  type            String
  
  @@index([agendaItemId])
  @@index([timestamp])
  @@schema("tenant")
}

model VoteUpdate {
  id              Int         @id @default(autoincrement())
  voteId          Int
  vote            Vote        @relation(fields: [voteId], references: [id])
  content         String
  authorId        Int
  authorName      String
  timestamp       DateTime    @default(now())
  type            String
  
  @@index([voteId])
  @@index([timestamp])
  @@schema("tenant")
}

model AttendanceUpdate {
  id              Int         @id @default(autoincrement())
  attendanceId    Int
  attendance      Attendance  @relation(fields: [attendanceId], references: [id])
  content         String
  authorId        Int
  authorName      String
  timestamp       DateTime    @default(now())
  type            String
  
  @@index([attendanceId])
  @@index([timestamp])
  @@schema("tenant")
}

model DocumentUpdate {
  id              Int         @id @default(autoincrement())
  documentId      Int
  document        Document    @relation(fields: [documentId], references: [id])
  content         String
  authorId        Int
  authorName      String
  timestamp       DateTime    @default(now())
  type            String
  
  @@index([documentId])
  @@index([timestamp])
  @@schema("tenant")
}

model AuditLogUpdate {
  id              Int         @id @default(autoincrement())
  auditLogId      Int
  auditLog        AuditLog    @relation(fields: [auditLogId], references: [id])
  content         String
  authorId        Int
  authorName      String
  timestamp       DateTime    @default(now())
  type            String
  
  @@index([auditLogId])
  @@index([timestamp])
  @@schema("tenant")
}
