// Esquema para el Sistema de Citofonía Virtual

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// Enumeraciones para el sistema de citofonía virtual
enum VisitStatus {
  PENDING
  NOTIFIED
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationChannel {
  WHATSAPP
  TELEGRAM
  SMS
  EMAIL
  APP
}

enum IntercomNotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  RESPONDED
  FAILED
  EXPIRED
}

enum ResponseType {
  APPROVE
  REJECT
  CUSTOM
}

// Modelo para tipos de visitantes
model VisitorType {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  requiresApproval  Boolean           @default(true)
  color             String?
  icon              String?
  visitors          Visitor[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

// Modelo para unidades residenciales
model Unit {
  id                Int               @id @default(autoincrement())
  number            String
  type              String
  floor             Int?
  tower             String?
  ownerId           Int?
  residents         Int[]
  visits            Visit[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([number, tower])
  @@schema("tenant")
}

// Modelo para visitas
model Visit {
  id                String            @id @default(uuid())
  visitorId         String
  visitor           Visitor           @relation(fields: [visitorId], references: [id])
  unitId            Int
  unit              Unit              @relation(fields: [unitId], references: [id])
  purpose           String
  status            VisitStatus       @default(PENDING)
  entryTime         DateTime?
  exitTime          DateTime?
  authorizedBy      Int?
  notes             String?
  notifications     VirtualIntercomNotification[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([visitorId])
  @@index([unitId])
  @@index([status])
  @@index([entryTime])
  @@schema("tenant")
}

// Modelo para notificaciones de citofonía virtual
model VirtualIntercomNotification {
  id                String            @id @default(uuid())
  visitId           String
  visit             Visit             @relation(fields: [visitId], references: [id])
  userId            Int
  channel           NotificationChannel
  status            IntercomNotificationStatus @default(PENDING)
  sentAt            DateTime          @default(now())
  deliveredAt       DateTime?
  readAt            DateTime?
  respondedAt       DateTime?
  response          String?
  responseType      ResponseType?
  messageId         String?
  errorMessage      String?
  retries           Int               @default(0)

  @@index([visitId])
  @@index([userId])
  @@index([channel])
  @@index([status])
  @@schema("tenant")
}

// Modelo para preferencias de citofonía por usuario
model UserIntercomPreference {
  id                Int               @id @default(autoincrement())
  userId            Int
  whatsappEnabled   Boolean           @default(true)
  whatsappNumber    String?
  telegramEnabled   Boolean           @default(false)
  telegramUsername  String?
  telegramChatId    String?
  notifyAllVisitors Boolean           @default(true)
  allowedVisitorTypes Int[]
  autoApproveTypes  Int[]
  quietHoursStart   String?
  quietHoursEnd     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([userId])
  @@schema("tenant")
}

// Modelo para configuración general de citofonía virtual
model IntercomSettings {
  id                Int               @id @default(autoincrement())
  whatsappEnabled   Boolean           @default(true)
  whatsappProvider  String?
  whatsappConfig    Json?
  telegramEnabled   Boolean           @default(true)
  telegramBotToken  String?
  telegramConfig    Json?
  defaultResponseTimeout Int          @default(60)
  maxRetries        Int               @default(2)
  retryDelay        Int               @default(30)
  messageTemplates  Json
  updatedAt         DateTime          @updatedAt

  @@schema("tenant")
}

// Modelo para registro de actividad de citofonía virtual
model IntercomActivityLog {
  id                String            @id @default(uuid())
  eventType         String
  visitId           String?
  userId            Int?
  visitorId         String?
  channel           NotificationChannel?
  details           Json
  timestamp         DateTime          @default(now())

  @@index([eventType])
  @@index([visitId])
  @@index([userId])
  @@index([timestamp])
  @@schema("tenant")
}
