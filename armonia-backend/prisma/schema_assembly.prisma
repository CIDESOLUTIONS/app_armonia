// Esquema para el Módulo de Asamblea Avanzado

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

// --- ENUMERACIONES --- //

enum AssemblyStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum AssemblyType {
  ORDINARY
  EXTRAORDINARY
  COMMITTEE
}

enum VotingStatus {
  PENDING
  ACTIVE
  CLOSED
  CANCELLED
}

enum VotingType {
  SIMPLE_MAJORITY
  QUALIFIED_MAJORITY
  UNANIMOUS
  COEFFICIENT_BASED
}

enum AttendanceType {
  PRESENT
  PROXY
  VIRTUAL
}

enum QuorumStatus {
  NOT_REACHED
  REACHED
  VERIFYING
}

enum MinutesStatus {
  PENDING
  GENERATING
  GENERATED
  SIGNING
  SIGNED
  REJECTED
  FAILED
}

enum SignatureStatus {
  PENDING
  SIGNED
  REJECTED
}

// --- MODELOS PRINCIPALES --- //

model Assembly {
  id                Int           @id @default(autoincrement())
  title             String
  description       String?
  type              AssemblyType
  status            AssemblyStatus  @default(SCHEDULED)
  date              DateTime
  endTime           DateTime?
  location          String
  agenda            Json
  requiredCoefficient Float
  currentCoefficient  Float         @default(0.0)
  quorumStatus        QuorumStatus  @default(NOT_REACHED)
  quorumReachedAt     DateTime?
  realtimeChannel   String?
  attendees         AssemblyAttendee[]
  votings           Voting[]
  minutes           AssemblyMinutes?
  createdBy         Int // ID del usuario que creó la asamblea
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([status])
  @@index([date])
  @@schema("tenant")
}

model AssemblyAttendee {
  id                Int           @id @default(autoincrement())
  assemblyId        Int
  assembly          Assembly      @relation(fields: [assemblyId], references: [id])
  userId            Int           // ID del usuario asistente
  propertyUnitId    Int           // ID de la unidad/propiedad representada
  coefficient       Float         // Coeficiente de la propiedad
  attendanceType    AttendanceType
  proxyUserId       Int?          // ID del usuario que otorga el poder (si aplica)
  proxyDocumentUrl  String?       // URL del documento de poder
  checkInTime       DateTime      @default(now())
  checkOutTime      DateTime?
  ipAddress         String?       // IP para asistentes virtuales
  userAgent         String?

  @@unique([assemblyId, userId, propertyUnitId])
  @@index([assemblyId])
  @@index([userId])
  @@schema("tenant")
}

model Voting {
  id                Int           @id @default(autoincrement())
  assemblyId        Int
  assembly          Assembly      @relation(fields: [assemblyId], references: [id])
  agendaPoint       Int
  title             String
  description       String?
  type              VotingType
  status            VotingStatus  @default(PENDING)
  options           Json
  startTime         DateTime?
  endTime           DateTime?
  result            Json?
  totalVotes        Int           @default(0)
  totalCoefficientVoted Float     @default(0.0)
  isApproved        Boolean?
  requiredPercentage Float?
  baseForPercentage String?
  votes             Vote[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([assemblyId])
  @@index([status])
  @@schema("tenant")
}

model Vote {
  id                Int           @id @default(autoincrement())
  votingId          Int
  voting            Voting        @relation(fields: [votingId], references: [id])
  attendeeId        Int
  userId            Int
  propertyUnitId    Int
  coefficient       Float
  value             String
  comments          String?
  timestamp         DateTime      @default(now())
  ipAddress         String?
  userAgent         String?

  @@unique([votingId, attendeeId])
  @@index([votingId])
  @@index([userId])
  @@schema("tenant")
}

model AssemblyMinutes {
  id                Int           @id @default(autoincrement())
  assemblyId        Int           @unique
  assembly          Assembly      @relation(fields: [assemblyId], references: [id])
  status            MinutesStatus @default(PENDING)
  content           String?
  generatedAt       DateTime?
  pdfUrl            String?
  generationLog     String?
  signaturesRequired Int          @default(2)
  signaturesCompleted Int          @default(0)
  signatures        DigitalSignature[]
  signedPdfUrl      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([assemblyId])
  @@index([status])
  @@schema("tenant")
}

model DigitalSignature {
  id                Int           @id @default(autoincrement())
  minutesId         Int
  minutes           AssemblyMinutes @relation(fields: [minutesId], references: [id])
  signerUserId      Int           // ID del usuario firmante
  signerName        String
  signerRole        String
  status            SignatureStatus @default(PENDING)
  signedAt          DateTime?
  signatureData     String?
  ipAddress         String?
  userAgent         String?
  rejectionReason   String?

  @@index([minutesId])
  @@index([signerUserId])
  @@index([status])
  @@schema("tenant")
}
